/* The following code was generated by JFlex 1.4.3 on 4/7/16 8:05 PM */

package com.csharp.lexer;
import com.intellij.ide.script.IDE;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.csharp.CSharpTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/7/16 8:05 PM from the specification file
 * <tt>C:/Users/rescas/IdeaProjects/intellij-csharp/src/com/csharp/lexer/_CSharpLexer.flex</tt>
 */
public class _CSharpLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\3\1\1\1\1\22\0\1\1\1\27\1\11"+
    "\2\0\1\37\1\33\1\7\1\21\1\22\1\36\1\30\1\25\1\31"+
    "\1\6\1\4\12\5\1\23\1\24\1\35\1\26\1\40\2\0\1\67"+
    "\2\14\1\76\7\14\1\75\2\14\1\71\1\70\2\14\1\72\7\14"+
    "\1\17\1\10\1\20\1\34\1\13\1\0\1\46\1\60\1\52\1\55"+
    "\1\50\1\63\1\45\1\66\1\43\1\74\1\73\1\56\1\47\1\44"+
    "\1\54\1\51\1\14\1\62\1\42\1\61\1\41\1\53\1\57\1\65"+
    "\1\64\1\77\1\15\1\32\1\16\54\0\1\12\12\0\1\12\4\0"+
    "\1\12\5\0\27\12\1\0\37\12\1\0\u01ca\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\10\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\110\0\33\12\5\0\3\12\55\0\53\12\43\0\2\12\1\0"+
    "\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\0\3\12\2\0"+
    "\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0\1\12\30\0"+
    "\41\12\11\0\2\12\4\0\1\12\5\0\26\12\4\0\1\12\11\0"+
    "\1\12\3\0\1\12\27\0\31\12\107\0\1\12\1\0\13\12\127\0"+
    "\66\12\3\0\1\12\22\0\1\12\7\0\12\12\17\0\7\12\1\0"+
    "\7\12\5\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\1\12\3\0\4\12\3\0\1\12\20\0\1\12\15\0\2\12\1\0"+
    "\3\12\16\0\2\12\23\0\6\12\4\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\2\12\1\0\2\12\37\0\4\12\1\0"+
    "\1\12\23\0\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0"+
    "\2\12\43\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0\3\12\17\0"+
    "\1\12\21\0\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0"+
    "\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0"+
    "\14\12\26\0\1\12\64\0\10\12\1\0\3\12\1\0\27\12\1\0"+
    "\12\12\1\0\5\12\3\0\1\12\32\0\2\12\6\0\2\12\43\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0"+
    "\1\12\40\0\1\12\1\0\2\12\17\0\2\12\22\0\10\12\1\0"+
    "\3\12\1\0\51\12\2\0\1\12\20\0\1\12\21\0\2\12\30\0"+
    "\6\12\5\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\72\0\60\12\1\0\2\12\14\0\7\12\72\0\2\12\1\0"+
    "\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0"+
    "\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0"+
    "\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0\1\12\25\0"+
    "\4\12\40\0\1\12\77\0\10\12\1\0\44\12\33\0\5\12\163\0"+
    "\53\12\24\0\1\12\20\0\6\12\4\0\4\12\3\0\1\12\3\0"+
    "\2\12\7\0\3\12\4\0\15\12\14\0\1\12\21\0\46\12\1\0"+
    "\1\12\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12\2\0"+
    "\7\12\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12\2\0"+
    "\41\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0"+
    "\17\12\1\0\71\12\1\0\4\12\2\0\103\12\45\0\20\12\20\0"+
    "\125\12\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\25\0"+
    "\15\12\1\0\4\12\16\0\22\12\16\0\22\12\16\0\15\12\1\0"+
    "\3\12\17\0\64\12\43\0\1\12\4\0\1\12\103\0\130\12\10\0"+
    "\51\12\1\0\1\12\5\0\106\12\12\0\35\12\63\0\36\12\2\0"+
    "\5\12\13\0\54\12\25\0\7\12\70\0\27\12\11\0\65\12\122\0"+
    "\1\12\135\0\57\12\21\0\7\12\67\0\36\12\15\0\2\12\12\0"+
    "\54\12\32\0\44\12\51\0\3\12\12\0\44\12\153\0\4\12\1\0"+
    "\4\12\3\0\2\12\11\0\300\12\100\0\u0116\12\2\0\6\12\2\0"+
    "\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0\1\12\3\0"+
    "\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\15\12\5\0"+
    "\3\12\1\0\7\12\164\0\1\12\15\0\1\12\20\0\15\12\145\0"+
    "\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0\13\12\2\0"+
    "\4\12\5\0\5\12\4\0\1\12\64\0\2\12\u0a7b\0\57\12\1\0"+
    "\57\12\1\0\205\12\6\0\4\12\3\0\2\12\14\0\46\12\1\0"+
    "\1\12\5\0\1\12\2\0\70\12\7\0\1\12\20\0\27\12\11\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\120\0\1\12\u01d5\0\2\12\52\0"+
    "\5\12\5\0\2\12\4\0\126\12\6\0\3\12\1\0\132\12\1\0"+
    "\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0\20\12\u0200\0"+
    "\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0\56\12\2\0\u010d\12\3\0"+
    "\20\12\12\0\2\12\24\0\57\12\20\0\31\12\10\0\106\12\61\0"+
    "\11\12\2\0\147\12\2\0\4\12\1\0\4\12\14\0\13\12\115\0"+
    "\12\12\1\0\3\12\1\0\4\12\1\0\27\12\35\0\64\12\16\0"+
    "\62\12\76\0\6\12\3\0\1\12\16\0\34\12\12\0\27\12\31\0"+
    "\35\12\7\0\57\12\34\0\1\12\60\0\51\12\27\0\3\12\1\0"+
    "\10\12\24\0\27\12\3\0\1\12\5\0\60\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12\2\0"+
    "\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0\6\12\11\0"+
    "\7\12\1\0\7\12\221\0\43\12\35\0\u2ba4\12\14\0\27\12\4\0"+
    "\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0\5\12\5\0"+
    "\1\12\1\0\12\12\1\0\15\12\1\0\5\12\1\0\1\12\1\0"+
    "\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0\100\12\2\0"+
    "\66\12\50\0\14\12\164\0\5\12\1\0\207\12\44\0\32\12\6\0"+
    "\32\12\13\0\131\12\3\0\6\12\2\0\6\12\2\0\6\12\2\0"+
    "\3\12\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\22\11\1\37\3\11\1\40\1\41\1\5\1\0\1\42"+
    "\3\0\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\12\11\1\65\1\66\1\67\4\11"+
    "\1\70\24\11\1\71\24\11\1\72\1\73\1\74\16\11"+
    "\1\75\2\11\1\76\26\11\1\77\2\11\1\100\20\11"+
    "\1\101\6\11\1\102\2\11\1\103\7\11\1\104\15\11"+
    "\1\105\1\11\1\106\2\11\1\107\3\11\1\110\1\111"+
    "\7\11\1\112\4\11\1\113\2\11\1\114\10\11\1\115"+
    "\1\116\1\117\2\11\1\120\1\121\1\11\1\122\1\123"+
    "\1\11\1\124\11\11\1\125\1\126\1\11\1\127\2\11"+
    "\1\130\1\131\3\11\1\132\3\11\1\133\3\11\1\134"+
    "\1\11\1\135\1\11\1\136\1\137\6\11\1\140\1\141"+
    "\1\11\1\142\13\11\1\143\1\144\1\11\1\145\4\11"+
    "\1\146\1\11\1\147\1\150\1\11\1\151\1\152\1\153"+
    "\1\154\1\155\1\11\1\156\1\157\6\11\1\160\1\161"+
    "\2\11\1\162\6\11\1\163\2\11\1\164\1\11\1\165"+
    "\1\11\1\166\1\167\1\11\1\170\12\11\1\171\1\172"+
    "\3\11\1\173\2\11\1\174\1\11\1\175\1\176\1\11"+
    "\1\177\1\200\3\11\1\201\2\11\1\202\2\11\1\203"+
    "\1\204\1\205\1\206\1\207\1\210\3\11\1\211\1\212"+
    "\1\213\1\214\1\11\1\215\1\216\1\217";

  private static int [] zzUnpackAction() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\100\0\u0180"+
    "\0\100\0\u01c0\0\u0200\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\u0240\0\u0280\0\u02c0\0\u0300"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\u0200\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\100"+
    "\0\u0ac0\0\u0180\0\100\0\u0b00\0\u01c0\0\u0b40\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\u0b80\0\100\0\100\0\u0bc0\0\100\0\100\0\100\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0200\0\u0ec0\0\u0200\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780"+
    "\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\u1a00\0\u1a40\0\100\0\100\0\100\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u0200"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u0200\0\u2440"+
    "\0\u2480\0\u0200\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600"+
    "\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800"+
    "\0\u2840\0\u2880\0\u0200\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0"+
    "\0\u2a00\0\u0200\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80"+
    "\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u0200\0\u2cc0\0\u2d00\0\u2d40"+
    "\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40"+
    "\0\u2f80\0\u2fc0\0\u0200\0\u3000\0\u0200\0\u3040\0\u3080\0\u0200"+
    "\0\u30c0\0\u3100\0\u3140\0\u0200\0\u0200\0\u3180\0\u31c0\0\u3200"+
    "\0\u3240\0\u3280\0\u32c0\0\u3300\0\u0200\0\u3340\0\u3380\0\u33c0"+
    "\0\u3400\0\u0200\0\u3440\0\u3480\0\u0200\0\u34c0\0\u3500\0\u3540"+
    "\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u0200\0\u0200\0\u0200"+
    "\0\u36c0\0\u3700\0\u0200\0\u0200\0\u3740\0\u0200\0\u0200\0\u3780"+
    "\0\u0200\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940"+
    "\0\u3980\0\u39c0\0\u0200\0\u0200\0\u3a00\0\u0200\0\u3a40\0\u3a80"+
    "\0\u0200\0\u0200\0\u3ac0\0\u3b00\0\u3b40\0\u0200\0\u3b80\0\u3bc0"+
    "\0\u3c00\0\u0200\0\u3c40\0\u3c80\0\u3cc0\0\u0200\0\u3d00\0\u0200"+
    "\0\u3d40\0\u0200\0\u0200\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80"+
    "\0\u3ec0\0\u0200\0\u0200\0\u3f00\0\u0200\0\u3f40\0\u3f80\0\u3fc0"+
    "\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0"+
    "\0\u0200\0\u0200\0\u4200\0\u0200\0\u4240\0\u4280\0\u42c0\0\u4300"+
    "\0\u0200\0\u4340\0\u0200\0\u0200\0\u4380\0\u0200\0\u0200\0\u0200"+
    "\0\u0200\0\u0200\0\u43c0\0\u0200\0\u0200\0\u4400\0\u4440\0\u4480"+
    "\0\u44c0\0\u4500\0\u4540\0\u0200\0\u0200\0\u4580\0\u45c0\0\u0200"+
    "\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740\0\u0200\0\u4780"+
    "\0\u47c0\0\u0200\0\u4800\0\u0200\0\u4840\0\u0200\0\u0200\0\u4880"+
    "\0\u0200\0\u48c0\0\u4900\0\u4940\0\u4980\0\u49c0\0\u4a00\0\u4a40"+
    "\0\u4a80\0\u4ac0\0\u4b00\0\u0200\0\u0200\0\u4b40\0\u4b80\0\u4bc0"+
    "\0\u0200\0\u4c00\0\u4c40\0\u0200\0\u4c80\0\u0200\0\u0200\0\u4cc0"+
    "\0\u0200\0\u0200\0\u4d00\0\u4d40\0\u4d80\0\u0200\0\u4dc0\0\u4e00"+
    "\0\u0200\0\u4e40\0\u4e80\0\u0200\0\u0200\0\u0200\0\u0200\0\u0200"+
    "\0\u0200\0\u4ec0\0\u4f00\0\u4f40\0\u0200\0\u0200\0\u0200\0\u0200"+
    "\0\u4f80\0\u0200\0\u0200\0\u0200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\13\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\13\1\64\5\13"+
    "\1\65\1\66\1\13\101\0\2\3\1\4\75\0\3\4"+
    "\100\0\1\67\21\0\1\70\56\0\1\6\1\71\71\0"+
    "\7\72\1\73\1\74\67\72\10\75\1\76\1\73\66\75"+
    "\5\0\1\13\5\0\2\13\24\0\37\13\26\0\1\77"+
    "\77\0\1\100\77\0\1\101\1\0\1\102\75\0\1\103"+
    "\2\0\1\104\74\0\1\105\3\0\1\106\73\0\1\107"+
    "\4\0\1\110\1\111\71\0\1\112\77\0\1\113\6\0"+
    "\1\114\70\0\1\115\77\0\1\116\77\0\1\117\11\0"+
    "\1\120\44\0\1\13\5\0\2\13\24\0\1\13\1\121"+
    "\1\122\1\123\11\13\1\124\21\13\5\0\1\13\5\0"+
    "\2\13\24\0\2\13\1\125\4\13\1\126\6\13\1\127"+
    "\1\130\1\131\4\13\1\132\11\13\5\0\1\13\5\0"+
    "\2\13\24\0\1\13\1\133\1\13\1\134\16\13\1\135"+
    "\14\13\5\0\1\13\5\0\2\13\24\0\1\136\4\13"+
    "\1\137\1\13\1\140\27\13\5\0\1\13\5\0\2\13"+
    "\24\0\13\13\1\141\23\13\5\0\1\13\5\0\2\13"+
    "\24\0\1\13\1\142\15\13\1\143\17\13\5\0\1\13"+
    "\5\0\2\13\24\0\3\13\1\144\6\13\1\145\2\13"+
    "\1\146\3\13\1\147\2\13\1\150\12\13\5\0\1\13"+
    "\5\0\2\13\24\0\1\151\4\13\1\152\13\13\1\153"+
    "\15\13\5\0\1\13\5\0\2\13\24\0\5\13\1\154"+
    "\5\13\1\155\1\13\1\156\7\13\1\157\11\13\5\0"+
    "\1\13\5\0\2\13\24\0\2\13\1\160\2\13\1\161"+
    "\5\13\1\162\23\13\5\0\1\13\5\0\2\13\24\0"+
    "\1\163\11\13\1\164\4\13\1\165\17\13\5\0\1\13"+
    "\5\0\2\13\24\0\7\13\1\166\3\13\1\167\23\13"+
    "\5\0\1\13\5\0\2\13\24\0\2\13\1\170\10\13"+
    "\1\171\23\13\5\0\1\13\5\0\2\13\24\0\5\13"+
    "\1\172\17\13\1\173\11\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\174\5\13\1\175\5\13\1\176\1\13"+
    "\1\177\13\13\5\0\1\13\5\0\2\13\24\0\21\13"+
    "\1\200\1\13\1\201\1\13\1\202\11\13\5\0\1\13"+
    "\5\0\2\13\24\0\7\13\1\203\27\13\5\0\1\13"+
    "\5\0\2\13\24\0\2\13\1\204\2\13\1\205\5\13"+
    "\1\206\1\13\1\207\21\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\210\34\13\5\0\1\13\5\0\2\13"+
    "\24\0\27\13\1\211\7\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\212\34\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\213\34\13\2\67\1\0\75\67\5\0"+
    "\1\71\72\0\2\72\1\0\75\72\2\75\1\0\75\75"+
    "\26\0\1\214\77\0\1\215\77\0\1\216\56\0\1\13"+
    "\5\0\2\13\24\0\2\13\1\217\22\13\1\220\11\13"+
    "\5\0\1\13\5\0\2\13\24\0\3\13\1\221\33\13"+
    "\5\0\1\13\5\0\2\13\24\0\1\13\1\222\12\13"+
    "\1\223\22\13\5\0\1\13\5\0\2\13\24\0\13\13"+
    "\1\224\23\13\5\0\1\13\5\0\2\13\24\0\36\13"+
    "\1\225\5\0\1\13\5\0\2\13\24\0\5\13\1\226"+
    "\31\13\5\0\1\13\5\0\2\13\24\0\2\13\1\227"+
    "\34\13\5\0\1\13\5\0\2\13\24\0\23\13\1\230"+
    "\13\13\5\0\1\13\5\0\2\13\24\0\5\13\1\231"+
    "\13\13\1\232\15\13\5\0\1\13\5\0\2\13\24\0"+
    "\13\13\1\233\23\13\5\0\1\13\5\0\2\13\24\0"+
    "\1\13\1\234\16\13\1\235\16\13\5\0\1\13\5\0"+
    "\2\13\24\0\15\13\1\236\21\13\5\0\1\13\5\0"+
    "\2\13\24\0\6\13\1\237\30\13\5\0\1\13\5\0"+
    "\2\13\24\0\16\13\1\240\20\13\5\0\1\13\5\0"+
    "\2\13\24\0\20\13\1\241\16\13\5\0\1\13\5\0"+
    "\2\13\24\0\23\13\1\242\13\13\5\0\1\13\5\0"+
    "\2\13\24\0\1\13\1\243\35\13\5\0\1\13\5\0"+
    "\2\13\24\0\1\244\13\13\1\245\22\13\5\0\1\13"+
    "\5\0\2\13\24\0\7\13\1\246\27\13\5\0\1\13"+
    "\5\0\2\13\24\0\1\13\1\247\1\250\34\13\5\0"+
    "\1\13\5\0\2\13\24\0\21\13\1\251\15\13\5\0"+
    "\1\13\5\0\2\13\24\0\20\13\1\252\16\13\5\0"+
    "\1\13\5\0\2\13\24\0\17\13\1\253\17\13\5\0"+
    "\1\13\5\0\2\13\24\0\21\13\1\254\15\13\5\0"+
    "\1\13\5\0\2\13\24\0\2\13\1\255\2\13\1\256"+
    "\5\13\1\257\23\13\5\0\1\13\5\0\2\13\24\0"+
    "\1\13\1\260\16\13\1\261\16\13\5\0\1\13\5\0"+
    "\2\13\24\0\3\13\1\262\33\13\5\0\1\13\5\0"+
    "\2\13\24\0\5\13\1\263\31\13\5\0\1\13\5\0"+
    "\2\13\24\0\5\13\1\264\1\13\1\265\27\13\5\0"+
    "\1\13\5\0\2\13\24\0\21\13\1\266\15\13\5\0"+
    "\1\13\5\0\2\13\24\0\21\13\1\267\15\13\5\0"+
    "\1\13\5\0\2\13\24\0\2\13\1\270\12\13\1\271"+
    "\21\13\5\0\1\13\5\0\2\13\24\0\20\13\1\272"+
    "\16\13\5\0\1\13\5\0\2\13\24\0\7\13\1\273"+
    "\27\13\5\0\1\13\5\0\2\13\24\0\33\13\1\274"+
    "\3\13\5\0\1\13\5\0\2\13\24\0\11\13\1\275"+
    "\3\13\1\276\4\13\1\277\14\13\5\0\1\13\5\0"+
    "\2\13\24\0\1\300\36\13\5\0\1\13\5\0\2\13"+
    "\24\0\3\13\1\301\33\13\5\0\1\13\5\0\2\13"+
    "\24\0\3\13\1\302\5\13\1\303\25\13\5\0\1\13"+
    "\5\0\2\13\24\0\21\13\1\304\15\13\5\0\1\13"+
    "\5\0\2\13\24\0\2\13\1\305\34\13\5\0\1\13"+
    "\5\0\2\13\24\0\1\13\1\306\35\13\5\0\1\13"+
    "\5\0\2\13\24\0\13\13\1\307\23\13\5\0\1\13"+
    "\5\0\2\13\24\0\7\13\1\310\27\13\5\0\1\13"+
    "\5\0\2\13\24\0\20\13\1\311\16\13\5\0\1\13"+
    "\5\0\2\13\24\0\1\312\22\13\1\313\13\13\5\0"+
    "\1\13\5\0\2\13\24\0\10\13\1\314\26\13\5\0"+
    "\1\13\5\0\2\13\24\0\2\13\1\315\16\13\1\316"+
    "\15\13\5\0\1\13\5\0\2\13\24\0\4\13\1\317"+
    "\1\320\12\13\1\321\1\13\1\322\14\13\5\0\1\13"+
    "\5\0\2\13\24\0\3\13\1\323\33\13\5\0\1\13"+
    "\5\0\2\13\24\0\15\13\1\324\21\13\5\0\1\13"+
    "\5\0\2\13\24\0\21\13\1\325\15\13\5\0\1\13"+
    "\5\0\2\13\24\0\13\13\1\326\23\13\5\0\1\13"+
    "\5\0\2\13\24\0\7\13\1\327\27\13\5\0\1\13"+
    "\5\0\2\13\24\0\30\13\1\330\6\13\5\0\1\13"+
    "\5\0\2\13\24\0\1\13\1\331\35\13\5\0\1\13"+
    "\5\0\2\13\24\0\11\13\1\332\25\13\5\0\1\13"+
    "\5\0\2\13\24\0\3\13\1\333\33\13\5\0\1\13"+
    "\5\0\2\13\24\0\13\13\1\334\23\13\5\0\1\13"+
    "\5\0\2\13\24\0\20\13\1\335\16\13\5\0\1\13"+
    "\5\0\2\13\24\0\5\13\1\336\31\13\5\0\1\13"+
    "\5\0\2\13\24\0\7\13\1\337\27\13\5\0\1\13"+
    "\5\0\2\13\24\0\3\13\1\340\33\13\5\0\1\13"+
    "\5\0\2\13\24\0\7\13\1\341\27\13\5\0\1\13"+
    "\5\0\2\13\24\0\15\13\1\342\21\13\5\0\1\13"+
    "\5\0\2\13\24\0\20\13\1\343\16\13\5\0\1\13"+
    "\5\0\2\13\24\0\20\13\1\344\16\13\5\0\1\13"+
    "\5\0\2\13\24\0\11\13\1\345\6\13\1\346\16\13"+
    "\5\0\1\13\5\0\2\13\24\0\1\347\36\13\5\0"+
    "\1\13\5\0\2\13\24\0\21\13\1\350\15\13\5\0"+
    "\1\13\5\0\2\13\24\0\20\13\1\351\16\13\5\0"+
    "\1\13\5\0\2\13\24\0\7\13\1\352\27\13\5\0"+
    "\1\13\5\0\2\13\24\0\15\13\1\353\21\13\5\0"+
    "\1\13\5\0\2\13\24\0\7\13\1\354\27\13\5\0"+
    "\1\13\5\0\2\13\24\0\13\13\1\355\23\13\5\0"+
    "\1\13\5\0\2\13\24\0\3\13\1\356\33\13\5\0"+
    "\1\13\5\0\2\13\24\0\20\13\1\357\16\13\5\0"+
    "\1\13\5\0\2\13\24\0\6\13\1\360\30\13\5\0"+
    "\1\13\5\0\2\13\24\0\2\13\1\361\16\13\1\362"+
    "\15\13\5\0\1\13\5\0\2\13\24\0\3\13\1\363"+
    "\33\13\5\0\1\13\5\0\2\13\24\0\7\13\1\364"+
    "\27\13\5\0\1\13\5\0\2\13\24\0\22\13\1\365"+
    "\14\13\5\0\1\13\5\0\2\13\24\0\13\13\1\366"+
    "\23\13\5\0\1\13\5\0\2\13\24\0\7\13\1\367"+
    "\27\13\5\0\1\13\5\0\2\13\24\0\15\13\1\370"+
    "\21\13\5\0\1\13\5\0\2\13\24\0\20\13\1\371"+
    "\16\13\5\0\1\13\5\0\2\13\24\0\12\13\1\372"+
    "\24\13\5\0\1\13\5\0\2\13\24\0\4\13\1\373"+
    "\32\13\5\0\1\13\5\0\2\13\24\0\20\13\1\374"+
    "\16\13\5\0\1\13\5\0\2\13\24\0\7\13\1\375"+
    "\27\13\5\0\1\13\5\0\2\13\24\0\11\13\1\376"+
    "\25\13\5\0\1\13\5\0\2\13\24\0\1\13\1\377"+
    "\16\13\1\u0100\16\13\5\0\1\13\5\0\2\13\24\0"+
    "\1\13\1\u0101\35\13\5\0\1\13\5\0\2\13\24\0"+
    "\21\13\1\u0102\15\13\5\0\1\13\5\0\2\13\24\0"+
    "\11\13\1\u0103\25\13\5\0\1\13\5\0\2\13\24\0"+
    "\20\13\1\u0104\16\13\5\0\1\13\5\0\2\13\24\0"+
    "\14\13\1\u0105\22\13\5\0\1\13\5\0\2\13\24\0"+
    "\5\13\1\u0106\31\13\5\0\1\13\5\0\2\13\24\0"+
    "\21\13\1\u0107\15\13\5\0\1\13\5\0\2\13\24\0"+
    "\7\13\1\u0108\27\13\5\0\1\13\5\0\2\13\24\0"+
    "\2\13\1\u0109\34\13\5\0\1\13\5\0\2\13\24\0"+
    "\7\13\1\u010a\27\13\5\0\1\13\5\0\2\13\24\0"+
    "\2\13\1\u010b\2\13\1\u010c\31\13\5\0\1\13\5\0"+
    "\2\13\24\0\17\13\1\u010d\17\13\5\0\1\13\5\0"+
    "\2\13\24\0\7\13\1\u010e\27\13\5\0\1\13\5\0"+
    "\2\13\24\0\4\13\1\u010f\32\13\5\0\1\13\5\0"+
    "\2\13\24\0\32\13\1\u0110\4\13\5\0\1\13\5\0"+
    "\2\13\24\0\3\13\1\u0111\33\13\5\0\1\13\5\0"+
    "\2\13\24\0\15\13\1\u0112\21\13\5\0\1\13\5\0"+
    "\2\13\24\0\7\13\1\u0113\27\13\5\0\1\13\5\0"+
    "\2\13\24\0\15\13\1\u0114\21\13\5\0\1\13\5\0"+
    "\2\13\24\0\5\13\1\u0115\31\13\5\0\1\13\5\0"+
    "\2\13\24\0\7\13\1\u0116\27\13\5\0\1\13\5\0"+
    "\2\13\24\0\7\13\1\u0117\27\13\5\0\1\13\5\0"+
    "\2\13\24\0\7\13\1\u0118\27\13\5\0\1\13\5\0"+
    "\2\13\24\0\1\13\1\u0119\35\13\5\0\1\13\5\0"+
    "\2\13\24\0\13\13\1\u011a\23\13\5\0\1\13\5\0"+
    "\2\13\24\0\2\13\1\u011b\34\13\5\0\1\13\5\0"+
    "\2\13\24\0\14\13\1\u011c\22\13\5\0\1\13\5\0"+
    "\2\13\24\0\1\u011d\36\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u011e\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\1\13\1\u011f\35\13\5\0\1\13\5\0\2\13"+
    "\24\0\7\13\1\u0120\27\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u0121\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\15\13\1\u0122\21\13\5\0\1\13\5\0\2\13"+
    "\24\0\31\13\1\u0123\5\13\5\0\1\13\5\0\2\13"+
    "\24\0\20\13\1\u0124\16\13\5\0\1\13\5\0\2\13"+
    "\24\0\20\13\1\u0125\16\13\5\0\1\13\5\0\2\13"+
    "\24\0\4\13\1\u0126\32\13\5\0\1\13\5\0\2\13"+
    "\24\0\21\13\1\u0127\15\13\5\0\1\13\5\0\2\13"+
    "\24\0\22\13\1\u0128\14\13\5\0\1\13\5\0\2\13"+
    "\24\0\22\13\1\u0129\14\13\5\0\1\13\5\0\2\13"+
    "\24\0\4\13\1\u012a\32\13\5\0\1\13\5\0\2\13"+
    "\24\0\13\13\1\u012b\23\13\5\0\1\13\5\0\2\13"+
    "\24\0\7\13\1\u012c\27\13\5\0\1\13\5\0\2\13"+
    "\24\0\11\13\1\u012d\25\13\5\0\1\13\5\0\2\13"+
    "\24\0\7\13\1\u012e\27\13\5\0\1\13\5\0\2\13"+
    "\24\0\32\13\1\u012f\4\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\u0130\34\13\5\0\1\13\5\0\2\13"+
    "\24\0\11\13\1\u0131\25\13\5\0\1\13\5\0\2\13"+
    "\24\0\20\13\1\u0132\16\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u0133\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\21\13\1\u0134\15\13\5\0\1\13\5\0\2\13"+
    "\24\0\1\13\1\u0135\35\13\5\0\1\13\5\0\2\13"+
    "\24\0\11\13\1\u0136\25\13\5\0\1\13\5\0\2\13"+
    "\24\0\21\13\1\u0137\15\13\5\0\1\13\5\0\2\13"+
    "\24\0\22\13\1\u0138\14\13\5\0\1\13\5\0\2\13"+
    "\24\0\7\13\1\u0139\27\13\5\0\1\13\5\0\2\13"+
    "\24\0\20\13\1\u013a\16\13\5\0\1\13\5\0\2\13"+
    "\24\0\21\13\1\u013b\15\13\5\0\1\13\5\0\2\13"+
    "\24\0\21\13\1\u013c\15\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\u013d\34\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\u013e\34\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u013f\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\6\13\1\u0140\30\13\5\0\1\13\5\0\2\13"+
    "\24\0\7\13\1\u0141\27\13\5\0\1\13\5\0\2\13"+
    "\24\0\25\13\1\u0142\11\13\5\0\1\13\5\0\2\13"+
    "\24\0\20\13\1\u0143\16\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\u0144\34\13\5\0\1\13\5\0\2\13"+
    "\24\0\1\13\1\u0145\35\13\5\0\1\13\5\0\2\13"+
    "\24\0\32\13\1\u0146\4\13\5\0\1\13\5\0\2\13"+
    "\24\0\1\u0147\36\13\5\0\1\13\5\0\2\13\24\0"+
    "\20\13\1\u0148\16\13\5\0\1\13\5\0\2\13\24\0"+
    "\21\13\1\u0149\15\13\5\0\1\13\5\0\2\13\24\0"+
    "\11\13\1\u014a\25\13\5\0\1\13\5\0\2\13\24\0"+
    "\6\13\1\u014b\30\13\5\0\1\13\5\0\2\13\24\0"+
    "\4\13\1\u014c\32\13\5\0\1\13\5\0\2\13\24\0"+
    "\3\13\1\u014d\33\13\5\0\1\13\5\0\2\13\24\0"+
    "\1\u014e\36\13\5\0\1\13\5\0\2\13\24\0\15\13"+
    "\1\u014f\21\13\5\0\1\13\5\0\2\13\24\0\2\13"+
    "\1\u0150\34\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u0151\27\13\5\0\1\13\5\0\2\13\24\0\32\13"+
    "\1\u0152\4\13\5\0\1\13\5\0\2\13\24\0\13\13"+
    "\1\u0153\23\13\5\0\1\13\5\0\2\13\24\0\16\13"+
    "\1\u0154\20\13\5\0\1\13\5\0\2\13\24\0\13\13"+
    "\1\u0155\23\13\5\0\1\13\5\0\2\13\24\0\13\13"+
    "\1\u0156\23\13\5\0\1\13\5\0\2\13\24\0\21\13"+
    "\1\u0157\15\13\5\0\1\13\5\0\2\13\24\0\15\13"+
    "\1\u0158\21\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u0159\27\13\5\0\1\13\5\0\2\13\24\0\5\13"+
    "\1\u015a\31\13\5\0\1\13\5\0\2\13\24\0\20\13"+
    "\1\u015b\16\13\5\0\1\13\5\0\2\13\24\0\14\13"+
    "\1\u015c\22\13\5\0\1\13\5\0\2\13\24\0\2\13"+
    "\1\u015d\34\13\5\0\1\13\5\0\2\13\24\0\20\13"+
    "\1\u015e\16\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u015f\27\13\5\0\1\13\5\0\2\13\24\0\22\13"+
    "\1\u0160\14\13\5\0\1\13\5\0\2\13\24\0\14\13"+
    "\1\u0161\22\13\5\0\1\13\5\0\2\13\24\0\25\13"+
    "\1\u0162\11\13\5\0\1\13\5\0\2\13\24\0\5\13"+
    "\1\u0163\31\13\5\0\1\13\5\0\2\13\24\0\11\13"+
    "\1\u0164\25\13\5\0\1\13\5\0\2\13\24\0\20\13"+
    "\1\u0165\16\13\5\0\1\13\5\0\2\13\24\0\3\13"+
    "\1\u0166\33\13\5\0\1\13\5\0\2\13\24\0\3\13"+
    "\1\u0167\16\13\1\u0168\14\13\5\0\1\13\5\0\2\13"+
    "\24\0\10\13\1\u0169\26\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u016a\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\4\13\1\u016b\32\13\5\0\1\13\5\0\2\13"+
    "\24\0\3\13\1\u016c\33\13\5\0\1\13\5\0\2\13"+
    "\24\0\11\13\1\u016d\25\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u016e\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\20\13\1\u016f\16\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u0170\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\11\13\1\u0171\25\13\5\0\1\13\5\0\2\13"+
    "\24\0\3\13\1\u0172\33\13\5\0\1\13\5\0\2\13"+
    "\24\0\1\13\1\u0173\35\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u0174\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\u0175\34\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\u0176\34\13\5\0\1\13\5\0\2\13"+
    "\24\0\20\13\1\u0177\16\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u0178\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u0179\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\7\13\1\u017a\27\13\5\0\1\13\5\0\2\13"+
    "\24\0\15\13\1\u017b\21\13\5\0\1\13\5\0\2\13"+
    "\24\0\7\13\1\u017c\27\13\5\0\1\13\5\0\2\13"+
    "\24\0\3\13\1\u017d\33\13\5\0\1\13\5\0\2\13"+
    "\24\0\22\13\1\u017e\14\13\5\0\1\13\5\0\2\13"+
    "\24\0\3\13\1\u017f\33\13\5\0\1\13\5\0\2\13"+
    "\24\0\3\13\1\u0180\33\13\5\0\1\13\5\0\2\13"+
    "\24\0\3\13\1\u0181\33\13\5\0\1\13\5\0\2\13"+
    "\24\0\15\13\1\u0182\21\13\5\0\1\13\5\0\2\13"+
    "\24\0\11\13\1\u0183\25\13\5\0\1\13\5\0\2\13"+
    "\24\0\13\13\1\u0184\23\13\5\0\1\13\5\0\2\13"+
    "\24\0\15\13\1\u0185\21\13\5\0\1\13\5\0\2\13"+
    "\24\0\11\13\1\u0186\25\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u0187\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u0188\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\5\13\1\u0189\31\13\5\0\1\13\5\0\2\13"+
    "\24\0\11\13\1\u018a\25\13\5\0\1\13\5\0\2\13"+
    "\24\0\2\13\1\u018b\34\13\5\0\1\13\5\0\2\13"+
    "\24\0\15\13\1\u018c\21\13\5\0\1\13\5\0\2\13"+
    "\24\0\7\13\1\u018d\27\13\5\0\1\13\5\0\2\13"+
    "\24\0\20\13\1\u018e\16\13\5\0\1\13\5\0\2\13"+
    "\24\0\1\u018f\36\13\5\0\1\13\5\0\2\13\24\0"+
    "\1\u0190\36\13\5\0\1\13\5\0\2\13\24\0\15\13"+
    "\1\u0191\21\13\5\0\1\13\5\0\2\13\24\0\15\13"+
    "\1\u0192\21\13\5\0\1\13\5\0\2\13\24\0\14\13"+
    "\1\u0193\22\13\5\0\1\13\5\0\2\13\24\0\15\13"+
    "\1\u0194\21\13\5\0\1\13\5\0\2\13\24\0\20\13"+
    "\1\u0195\16\13\5\0\1\13\5\0\2\13\24\0\20\13"+
    "\1\u0196\16\13\5\0\1\13\5\0\2\13\24\0\4\13"+
    "\1\u0197\32\13\5\0\1\13\5\0\2\13\24\0\15\13"+
    "\1\u0198\21\13\5\0\1\13\5\0\2\13\24\0\23\13"+
    "\1\u0199\13\13\5\0\1\13\5\0\2\13\24\0\25\13"+
    "\1\u019a\11\13\5\0\1\13\5\0\2\13\24\0\3\13"+
    "\1\u019b\33\13\5\0\1\13\5\0\2\13\24\0\15\13"+
    "\1\u019c\21\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u019d\27\13\5\0\1\13\5\0\2\13\24\0\15\13"+
    "\1\u019e\21\13\5\0\1\13\5\0\2\13\24\0\11\13"+
    "\1\u019f\25\13\5\0\1\13\5\0\2\13\24\0\11\13"+
    "\1\u01a0\25\13\5\0\1\13\5\0\2\13\24\0\20\13"+
    "\1\u01a1\16\13\5\0\1\13\5\0\2\13\24\0\13\13"+
    "\1\u01a2\23\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u01a3\27\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u01a4\27\13\5\0\1\13\5\0\2\13\24\0\6\13"+
    "\1\u01a5\30\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u01a6\27\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u01a7\27\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u01a8\27\13\5\0\1\13\5\0\2\13\24\0\23\13"+
    "\1\u01a9\13\13\5\0\1\13\5\0\2\13\24\0\5\13"+
    "\1\u01aa\31\13\5\0\1\13\5\0\2\13\24\0\13\13"+
    "\1\u01ab\23\13\5\0\1\13\5\0\2\13\24\0\13\13"+
    "\1\u01ac\23\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u01ad\27\13\5\0\1\13\5\0\2\13\24\0\7\13"+
    "\1\u01ae\27\13\5\0\1\13\5\0\2\13\24\0\3\13"+
    "\1\u01af\33\13\5\0\1\13\5\0\2\13\24\0\14\13"+
    "\1\u01b0\22\13\5\0\1\13\5\0\2\13\24\0\21\13"+
    "\1\u01b1\15\13\5\0\1\13\5\0\2\13\24\0\11\13"+
    "\1\u01b2\25\13\5\0\1\13\5\0\2\13\24\0\22\13"+
    "\1\u01b3\14\13\5\0\1\13\5\0\2\13\24\0\23\13"+
    "\1\u01b4\13\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\2\1\11\11"+
    "\43\1\1\11\1\1\1\0\1\11\3\0\12\11\1\1"+
    "\2\11\1\1\3\11\74\1\3\11\u0126\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _CSharpLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1624) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return SHIFT_LEFT;
          }
        case 144: break;
        case 58: 
          { return BIT_CLEAR_ASSIGN;
          }
        case 145: break;
        case 65: 
          { return TRY;
          }
        case 146: break;
        case 14: 
          { return LPAREN;
          }
        case 147: break;
        case 26: 
          { return LESS;
          }
        case 148: break;
        case 133: 
          { return VOLATILE;
          }
        case 149: break;
        case 38: 
          { return PLUS_PLUS;
          }
        case 150: break;
        case 44: 
          { return COND_AND;
          }
        case 151: break;
        case 123: 
          { return VIRTUAL;
          }
        case 152: break;
        case 99: 
          { return WHILE;
          }
        case 153: break;
        case 97: 
          { return CONST;
          }
        case 154: break;
        case 83: 
          { return TRUE;
          }
        case 155: break;
        case 37: 
          { return PLUS_ASSIGN;
          }
        case 156: break;
        case 105: 
          { return USHORT;
          }
        case 157: break;
        case 80: 
          { return BASE;
          }
        case 158: break;
        case 79: 
          { return LOCK;
          }
        case 159: break;
        case 112: 
          { return EXTERN;
          }
        case 160: break;
        case 110: 
          { return STATIC;
          }
        case 161: break;
        case 16: 
          { return COLON;
          }
        case 162: break;
        case 9: 
          { return IDENTIFIER;
          }
        case 163: break;
        case 143: 
          { return DICTIONARY;
          }
        case 164: break;
        case 100: 
          { return BREAK;
          }
        case 165: break;
        case 35: 
          { return EQ;
          }
        case 166: break;
        case 76: 
          { return VOID;
          }
        case 167: break;
        case 114: 
          { return PRAGMA;
          }
        case 168: break;
        case 92: 
          { return ASYNC;
          }
        case 169: break;
        case 126: 
          { return WARNING;
          }
        case 170: break;
        case 104: 
          { return YIELD;
          }
        case 171: break;
        case 120: 
          { return RETURN;
          }
        case 172: break;
        case 173: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 174: break;
        case 138: 
          { return NAMESPACE;
          }
        case 175: break;
        case 87: 
          { return USING;
          }
        case 176: break;
        case 117: 
          { return DOUBLE;
          }
        case 177: break;
        case 96: 
          { return CATCH;
          }
        case 178: break;
        case 18: 
          { return COMMA;
          }
        case 179: break;
        case 28: 
          { return MOD;
          }
        case 180: break;
        case 111: 
          { return STRUCT;
          }
        case 181: break;
        case 42: 
          { return COND_OR;
          }
        case 182: break;
        case 115: 
          { return OBJECT;
          }
        case 183: break;
        case 113: 
          { return PUBLIC;
          }
        case 184: break;
        case 95: 
          { return ERROR;
          }
        case 185: break;
        case 59: 
          { return SHIFT_LEFT_ASSIGN;
          }
        case 186: break;
        case 40: 
          { return MINUS_MINUS;
          }
        case 187: break;
        case 30: 
          { return U;
          }
        case 188: break;
        case 78: 
          { return LONG;
          }
        case 189: break;
        case 21: 
          { return PLUS;
          }
        case 190: break;
        case 24: 
          { return BIT_AND;
          }
        case 191: break;
        case 69: 
          { return NULL;
          }
        case 192: break;
        case 68: 
          { return UINT;
          }
        case 193: break;
        case 43: 
          { return BIT_AND_ASSIGN;
          }
        case 194: break;
        case 81: 
          { return BOOL;
          }
        case 195: break;
        case 140: 
          { return PROTECTED;
          }
        case 196: break;
        case 129: 
          { return INTERNAL;
          }
        case 197: break;
        case 109: 
          { return SWITCH;
          }
        case 198: break;
        case 4: 
          { return QUOTIENT;
          }
        case 199: break;
        case 66: 
          { return REF;
          }
        case 200: break;
        case 98: 
          { return CLASS;
          }
        case 201: break;
        case 128: 
          { return FOREACH;
          }
        case 202: break;
        case 121: 
          { return PARTIAL;
          }
        case 203: break;
        case 119: 
          { return REGION;
          }
        case 204: break;
        case 5: 
          { return DIGIT;
          }
        case 205: break;
        case 23: 
          { return BIT_OR;
          }
        case 206: break;
        case 71: 
          { return ENUM;
          }
        case 207: break;
        case 39: 
          { return MINUS_ASSIGN;
          }
        case 208: break;
        case 6: 
          { return DOT;
          }
        case 209: break;
        case 125: 
          { return DEFAULT;
          }
        case 210: break;
        case 108: 
          { return SEALED;
          }
        case 211: break;
        case 57: 
          { return DO;
          }
        case 212: break;
        case 54: 
          { return IN;
          }
        case 213: break;
        case 85: 
          { return APOS;
          }
        case 214: break;
        case 17: 
          { return SEMI;
          }
        case 215: break;
        case 134: 
          { return OVERRIDE;
          }
        case 216: break;
        case 75: 
          { return CHAR;
          }
        case 217: break;
        case 32: 
          { return COMMENT;
          }
        case 218: break;
        case 88: 
          { return UNDEF;
          }
        case 219: break;
        case 135: 
          { return DELEGATE;
          }
        case 220: break;
        case 102: 
          { return FALSE;
          }
        case 221: break;
        case 77: 
          { return LINE;
          }
        case 222: break;
        case 8: 
          { return QUOTE;
          }
        case 223: break;
        case 11: 
          { return RBRACE;
          }
        case 224: break;
        case 50: 
          { return REMAINDER_ASSIGN;
          }
        case 225: break;
        case 46: 
          { return BIT_XOR_ASSIGN;
          }
        case 226: break;
        case 62: 
          { return NEW;
          }
        case 227: break;
        case 107: 
          { return SIZEOF;
          }
        case 228: break;
        case 13: 
          { return RBRACK;
          }
        case 229: break;
        case 64: 
          { return OUT;
          }
        case 230: break;
        case 7: 
          { return BACK;
          }
        case 231: break;
        case 131: 
          { return CONTINUE;
          }
        case 232: break;
        case 61: 
          { return INT;
          }
        case 233: break;
        case 106: 
          { return UNSAFE;
          }
        case 234: break;
        case 82: 
          { return BYTE;
          }
        case 235: break;
        case 116: 
          { return DEFINE;
          }
        case 236: break;
        case 41: 
          { return BIT_OR_ASSIGN;
          }
        case 237: break;
        case 45: 
          { return BIT_CLEAR;
          }
        case 238: break;
        case 103: 
          { return FLOAT;
          }
        case 239: break;
        case 53: 
          { return IS;
          }
        case 240: break;
        case 10: 
          { return LBRACE;
          }
        case 241: break;
        case 19: 
          { return ASSIGN;
          }
        case 242: break;
        case 25: 
          { return BIT_XOR;
          }
        case 243: break;
        case 136: 
          { return READONLY;
          }
        case 244: break;
        case 90: 
          { return SBYTE;
          }
        case 245: break;
        case 12: 
          { return LBRACK;
          }
        case 246: break;
        case 63: 
          { return VAR;
          }
        case 247: break;
        case 137: 
          { return INTERFACE;
          }
        case 248: break;
        case 118: 
          { return TYPEOF;
          }
        case 249: break;
        case 89: 
          { return ULONG;
          }
        case 250: break;
        case 20: 
          { return NOT;
          }
        case 251: break;
        case 36: 
          { return NOT_EQ;
          }
        case 252: break;
        case 49: 
          { return MUL_ASSIGN;
          }
        case 253: break;
        case 141: 
          { return STACKALLOC;
          }
        case 254: break;
        case 101: 
          { return THROW;
          }
        case 255: break;
        case 72: 
          { return ELSE;
          }
        case 256: break;
        case 34: 
          { return STRING;
          }
        case 257: break;
        case 55: 
          { return IF;
          }
        case 258: break;
        case 142: 
          { return INSTANCEOF;
          }
        case 259: break;
        case 27: 
          { return MUL;
          }
        case 260: break;
        case 132: 
          { return CHECKSUM;
          }
        case 261: break;
        case 127: 
          { return FINALLY;
          }
        case 262: break;
        case 70: 
          { return GOTO;
          }
        case 263: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 264: break;
        case 22: 
          { return MINUS;
          }
        case 265: break;
        case 130: 
          { return ABSTRACT;
          }
        case 266: break;
        case 67: 
          { return FOR;
          }
        case 267: break;
        case 74: 
          { return CASE;
          }
        case 268: break;
        case 93: 
          { return ENDIF;
          }
        case 269: break;
        case 15: 
          { return RPAREN;
          }
        case 270: break;
        case 31: 
          { return X;
          }
        case 271: break;
        case 84: 
          { return THIS;
          }
        case 272: break;
        case 29: 
          { return GREATER;
          }
        case 273: break;
        case 47: 
          { return LESS_OR_EQUAL;
          }
        case 274: break;
        case 60: 
          { return SHIFT_RIGHT_ASSIGN;
          }
        case 275: break;
        case 139: 
          { return ENDREGION;
          }
        case 276: break;
        case 56: 
          { return AS;
          }
        case 277: break;
        case 73: 
          { return ELIF;
          }
        case 278: break;
        case 52: 
          { return SHIFT_RIGHT;
          }
        case 279: break;
        case 124: 
          { return DECIMAL;
          }
        case 280: break;
        case 91: 
          { return SHORT;
          }
        case 281: break;
        case 122: 
          { return PRIVATE;
          }
        case 282: break;
        case 86: 
          { return LIST;
          }
        case 283: break;
        case 33: 
          { return QUOTIENT_ASSIGN;
          }
        case 284: break;
        case 51: 
          { return GREATER_OR_EQUAL;
          }
        case 285: break;
        case 94: 
          { return EVENT;
          }
        case 286: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
