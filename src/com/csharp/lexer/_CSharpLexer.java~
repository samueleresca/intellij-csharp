/* The following code was generated by JFlex 1.4.3 on 4/6/16 4:48 PM */

package com.csharp.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.csharp.CSharpTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/6/16 4:48 PM from the specification file
 * <tt>C:/Users/rescas/IdeaProjects/intellij-csharp/src/com/csharp/lexer/_CSharpLexer.flex</tt>
 */
public class _CSharpLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\106\1\6"+
    "\1\0\1\107\1\102\1\51\1\0\1\3\1\22\1\54\1\100\1\75"+
    "\1\24\1\76\1\101\1\12\1\0\1\41\1\44\1\46\2\0\1\43"+
    "\1\50\1\25\1\73\1\55\1\104\1\74\1\105\1\11\1\77\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\120\1\125\1\111\1\0\1\116"+
    "\1\110\1\114\1\112\1\113\1\124\1\0\1\123\1\117\1\115\1\47"+
    "\1\0\1\122\1\126\1\121\1\53\1\4\1\2\1\7\1\5\1\37"+
    "\1\0\1\13\1\14\1\26\1\27\1\30\1\15\1\62\1\66\1\61"+
    "\1\72\1\65\1\60\1\67\1\16\1\64\1\71\1\70\1\17\1\57"+
    "\1\20\1\45\1\21\1\56\1\23\1\63\1\52\1\40\1\10\1\42"+
    "\1\103\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\7\1\1\11\1\12\11\1\1\13\1\14"+
    "\1\1\1\15\1\16\1\17\11\1\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\12\1\1\0\1\35\1\36\1\37\1\40"+
    "\3\0\1\41\3\0\1\42\20\0\1\43\1\44\6\0"+
    "\1\45\23\0\1\46\1\47\1\50\12\0\1\51\1\52"+
    "\1\53\6\0\1\54\10\0\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\0\1\75\14\0\1\76"+
    "\1\0\1\77\16\0\1\100\1\0\1\101\2\0\1\102"+
    "\3\0\1\103\36\0\1\104\20\0\1\105\6\0\1\106"+
    "\2\0\1\107\2\0\1\110\5\0\1\111\6\0\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\22\0"+
    "\1\122\1\0\1\123\1\124\1\0\1\125\6\0\1\126"+
    "\3\0\1\127\2\0\1\130\2\0\1\131\1\0\1\132"+
    "\3\0\1\133\7\0\1\134\3\0\1\135\20\0\1\136"+
    "\1\137\16\0\1\140\1\141\1\0\1\142\2\0\1\143"+
    "\12\0\1\144\1\145\1\146\16\0\1\147\1\0\1\150"+
    "\1\151\1\152\1\153\1\0\1\154\1\0\1\155\7\0"+
    "\1\156\2\0\1\157\1\160\1\0\1\161\7\0\1\162"+
    "\7\0\1\163\10\0\1\164\1\0\1\165\1\166\1\167"+
    "\1\170\6\0\1\171\3\0\1\172\2\0\1\173\1\174"+
    "\34\0\1\175\1\0\1\176\1\177\1\200\11\0\1\201"+
    "\1\202\1\0\1\203\2\0\1\204\7\0\1\205\1\0"+
    "\1\206\1\207\1\0\1\210\1\211\1\212\1\213\1\214"+
    "\1\215\4\0\1\216\3\0\1\217\3\0\1\220\3\0"+
    "\1\221\4\0\1\222\7\0\1\223\1\224\2\0\1\225"+
    "\2\0\1\226\1\227\1\230\2\0\1\231\14\0\1\232"+
    "\3\0\1\233\2\0\1\234\1\235\6\0\1\236\5\0"+
    "\1\237\1\0\1\240\1\0\1\241\1\242\1\243\1\0"+
    "\1\244\1\245\2\0\1\246\6\0\1\247\2\0\1\250"+
    "\1\251\1\252\1\253\4\0\1\254\6\0\1\255\1\256"+
    "\7\0\1\257\1\260\1\0\1\261\1\262\4\0\1\263"+
    "\4\0\1\264\6\0\1\265\6\0\1\266\14\0\1\267"+
    "\7\0\1\270\6\0\1\271\3\0\1\272\14\0\1\273"+
    "\5\0\1\274\5\0\1\275\5\0\1\276\2\0\1\277"+
    "\6\0\1\300\6\0\1\301\5\0\1\302\244\0\1\303";

  private static int [] zzUnpackAction() {
    int [] result = new int[954];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\256\0\u0105\0\127\0\127\0\u015c\0\127"+
    "\0\u01b3\0\127\0\u020a\0\u0261\0\u02b8\0\u030f\0\u0366\0\u03bd"+
    "\0\u0414\0\127\0\u046b\0\u04c2\0\u0519\0\u0570\0\u05c7\0\u061e"+
    "\0\u0675\0\u06cc\0\u0723\0\u077a\0\127\0\127\0\u07d1\0\u0828"+
    "\0\u087f\0\127\0\u08d6\0\u092d\0\u0984\0\u09db\0\u0a32\0\u0a89"+
    "\0\u0ae0\0\u0b37\0\u0b8e\0\127\0\u0be5\0\127\0\u0c3c\0\127"+
    "\0\u0c93\0\u0cea\0\u0d41\0\u0d98\0\u0def\0\u0e46\0\u0e9d\0\127"+
    "\0\u0ef4\0\u0f4b\0\u0fa2\0\u0ff9\0\u1050\0\u10a7\0\u10fe\0\u1155"+
    "\0\u11ac\0\u1203\0\u125a\0\u12b1\0\127\0\127\0\127\0\u1308"+
    "\0\u135f\0\u13b6\0\u140d\0\u1464\0\u14bb\0\u1512\0\u1569\0\u15c0"+
    "\0\u1617\0\u166e\0\u16c5\0\u171c\0\u1773\0\u17ca\0\u1821\0\u1878"+
    "\0\u18cf\0\u1926\0\u197d\0\u19d4\0\u1a2b\0\u1a82\0\u1ad9\0\127"+
    "\0\127\0\u1b30\0\u1b87\0\u1bde\0\u1c35\0\u1c8c\0\u1ce3\0\u1d3a"+
    "\0\u1d91\0\u1de8\0\u1e3f\0\u1e96\0\u1eed\0\u1f44\0\u1f9b\0\u1ff2"+
    "\0\u2049\0\u20a0\0\u20f7\0\u214e\0\u21a5\0\u21fc\0\u2253\0\u22aa"+
    "\0\u2301\0\u2358\0\u23af\0\127\0\127\0\127\0\u2406\0\u245d"+
    "\0\u24b4\0\u250b\0\u2562\0\u25b9\0\u2610\0\u2667\0\u26be\0\u2715"+
    "\0\127\0\u276c\0\127\0\u27c3\0\u281a\0\u2871\0\u28c8\0\u291f"+
    "\0\u2976\0\127\0\u29cd\0\u2a24\0\u2a7b\0\u2ad2\0\u2b29\0\u2b80"+
    "\0\u2bd7\0\u2c2e\0\127\0\127\0\u2c85\0\127\0\127\0\127"+
    "\0\127\0\127\0\127\0\u2cdc\0\u2d33\0\127\0\u2d8a\0\127"+
    "\0\u2de1\0\u2e38\0\u2e8f\0\127\0\u2ee6\0\u2f3d\0\u2f94\0\u2feb"+
    "\0\u3042\0\u3099\0\u30f0\0\u3147\0\u319e\0\u31f5\0\u324c\0\u32a3"+
    "\0\127\0\u32fa\0\127\0\u3351\0\u33a8\0\u33ff\0\u3456\0\u34ad"+
    "\0\u3504\0\u355b\0\u35b2\0\u3609\0\u3660\0\u36b7\0\u370e\0\u3765"+
    "\0\u37bc\0\u3813\0\u386a\0\127\0\u38c1\0\u3918\0\127\0\u396f"+
    "\0\u39c6\0\u3a1d\0\127\0\u3a74\0\u3acb\0\u3b22\0\u3b79\0\u3bd0"+
    "\0\u3c27\0\u3c7e\0\u3cd5\0\u3d2c\0\u3d83\0\u3dda\0\u3e31\0\u3e88"+
    "\0\u3edf\0\u3f36\0\u3f8d\0\u3fe4\0\u403b\0\u4092\0\u40e9\0\u4140"+
    "\0\u4197\0\u41ee\0\u4245\0\u429c\0\u42f3\0\u434a\0\u43a1\0\u43f8"+
    "\0\u444f\0\127\0\u44a6\0\u44fd\0\u4554\0\u45ab\0\u4602\0\u4659"+
    "\0\u46b0\0\u4707\0\u475e\0\u47b5\0\u480c\0\u4863\0\u48ba\0\u4911"+
    "\0\u4968\0\u49bf\0\127\0\u4a16\0\u4a6d\0\u4ac4\0\u4b1b\0\u4b72"+
    "\0\u4bc9\0\127\0\u4c20\0\u4c77\0\u4cce\0\u4d25\0\u4d7c\0\127"+
    "\0\u4dd3\0\u4e2a\0\u4e81\0\u4ed8\0\u4f2f\0\127\0\u4f86\0\u4fdd"+
    "\0\u5034\0\u508b\0\u50e2\0\u5139\0\127\0\127\0\127\0\127"+
    "\0\u5190\0\127\0\u51e7\0\127\0\u523e\0\u5295\0\u52ec\0\u5343"+
    "\0\u539a\0\u53f1\0\u5448\0\u549f\0\u54f6\0\u554d\0\u55a4\0\u55fb"+
    "\0\u5652\0\u56a9\0\u5700\0\u5757\0\u57ae\0\u5805\0\127\0\u585c"+
    "\0\127\0\127\0\u58b3\0\127\0\u590a\0\u5961\0\u59b8\0\u5a0f"+
    "\0\u5a66\0\u5abd\0\127\0\u5b14\0\u5b6b\0\u5bc2\0\127\0\u5c19"+
    "\0\u5c70\0\127\0\u5cc7\0\u5d1e\0\127\0\u5d75\0\127\0\u5dcc"+
    "\0\u5e23\0\u5e7a\0\127\0\u5ed1\0\u5f28\0\u5f7f\0\u5fd6\0\u602d"+
    "\0\u6084\0\u60db\0\127\0\u6132\0\u6189\0\u61e0\0\127\0\u6237"+
    "\0\u628e\0\u62e5\0\u633c\0\u6393\0\u63ea\0\u6441\0\u6498\0\u64ef"+
    "\0\u6546\0\u659d\0\u65f4\0\u664b\0\u66a2\0\u66f9\0\u6750\0\127"+
    "\0\127\0\u67a7\0\u67fe\0\u6855\0\u68ac\0\u6903\0\u695a\0\u69b1"+
    "\0\u6a08\0\u6a5f\0\u6ab6\0\u6b0d\0\u6b64\0\u6bbb\0\u6c12\0\127"+
    "\0\127\0\u6c69\0\127\0\u6cc0\0\u6d17\0\127\0\u6d6e\0\u6dc5"+
    "\0\u6e1c\0\u6e73\0\u6eca\0\u6f21\0\u6f78\0\u6fcf\0\u7026\0\u707d"+
    "\0\127\0\127\0\127\0\u70d4\0\u712b\0\u7182\0\u71d9\0\u7230"+
    "\0\u7287\0\u72de\0\u7335\0\u738c\0\u73e3\0\u743a\0\u7491\0\u74e8"+
    "\0\u753f\0\127\0\u7596\0\127\0\127\0\127\0\127\0\u75ed"+
    "\0\127\0\u7644\0\127\0\u769b\0\u76f2\0\u7749\0\u77a0\0\u77f7"+
    "\0\u784e\0\u78a5\0\127\0\u78fc\0\u7953\0\127\0\127\0\u79aa"+
    "\0\127\0\u7a01\0\u7a58\0\u7aaf\0\u7b06\0\u7b5d\0\u7bb4\0\u7c0b"+
    "\0\127\0\u7c62\0\u7cb9\0\u7d10\0\u7d67\0\u7dbe\0\u7e15\0\u7e6c"+
    "\0\127\0\u7ec3\0\u7f1a\0\u7f71\0\u7fc8\0\u801f\0\u8076\0\u80cd"+
    "\0\u8124\0\127\0\u817b\0\127\0\127\0\127\0\127\0\u81d2"+
    "\0\u8229\0\u8280\0\u82d7\0\u832e\0\u8385\0\127\0\u83dc\0\u8433"+
    "\0\u848a\0\127\0\u84e1\0\u8538\0\127\0\127\0\u858f\0\u85e6"+
    "\0\u863d\0\u8694\0\u86eb\0\u8742\0\u8799\0\u87f0\0\u8847\0\u889e"+
    "\0\u88f5\0\u894c\0\u89a3\0\u89fa\0\u8a51\0\u8aa8\0\u8aff\0\u8b56"+
    "\0\u8bad\0\u8c04\0\u8c5b\0\u8cb2\0\u8d09\0\u8d60\0\u8db7\0\u8e0e"+
    "\0\u8e65\0\u8ebc\0\127\0\u8f13\0\127\0\127\0\127\0\u8f6a"+
    "\0\u8fc1\0\u9018\0\u906f\0\u90c6\0\u911d\0\u9174\0\u91cb\0\u9222"+
    "\0\127\0\127\0\u9279\0\127\0\u92d0\0\u9327\0\127\0\u937e"+
    "\0\u93d5\0\u942c\0\u9483\0\u94da\0\u9531\0\u9588\0\127\0\u95df"+
    "\0\127\0\127\0\u9636\0\127\0\127\0\127\0\127\0\127"+
    "\0\127\0\u968d\0\u96e4\0\u973b\0\u9792\0\127\0\u97e9\0\u9840"+
    "\0\u9897\0\127\0\u98ee\0\u9945\0\u999c\0\127\0\u99f3\0\u9a4a"+
    "\0\u9aa1\0\127\0\u9af8\0\u9b4f\0\u9ba6\0\u9bfd\0\127\0\u9c54"+
    "\0\u9cab\0\u9d02\0\u9d59\0\u9db0\0\u9e07\0\u9e5e\0\127\0\127"+
    "\0\u9eb5\0\u9f0c\0\127\0\u9f63\0\u9fba\0\127\0\127\0\127"+
    "\0\ua011\0\ua068\0\127\0\ua0bf\0\ua116\0\ua16d\0\ua1c4\0\ua21b"+
    "\0\ua272\0\ua2c9\0\ua320\0\ua377\0\ua3ce\0\ua425\0\ua47c\0\127"+
    "\0\ua4d3\0\ua52a\0\ua581\0\127\0\ua5d8\0\ua62f\0\127\0\127"+
    "\0\ua686\0\ua6dd\0\ua734\0\ua78b\0\ua7e2\0\ua839\0\127\0\ua890"+
    "\0\ua8e7\0\ua93e\0\ua995\0\ua9ec\0\127\0\uaa43\0\127\0\uaa9a"+
    "\0\127\0\127\0\127\0\uaaf1\0\127\0\127\0\uab48\0\uab9f"+
    "\0\127\0\uabf6\0\uac4d\0\uaca4\0\uacfb\0\uad52\0\uada9\0\127"+
    "\0\uae00\0\uae57\0\127\0\127\0\127\0\127\0\uaeae\0\uaf05"+
    "\0\uaf5c\0\uafb3\0\127\0\ub00a\0\ub061\0\ub0b8\0\ub10f\0\ub166"+
    "\0\ub1bd\0\127\0\127\0\ub214\0\ub26b\0\ub2c2\0\ub319\0\ub370"+
    "\0\ub3c7\0\ub41e\0\127\0\127\0\ub475\0\127\0\127\0\ub4cc"+
    "\0\ub523\0\ub57a\0\ub5d1\0\127\0\ub628\0\ub67f\0\ub6d6\0\ub72d"+
    "\0\127\0\ub784\0\ub7db\0\ub832\0\ub889\0\ub8e0\0\ub937\0\127"+
    "\0\ub98e\0\ub9e5\0\uba3c\0\uba93\0\ubaea\0\ubb41\0\127\0\ubb98"+
    "\0\ubbef\0\ubc46\0\ubc9d\0\ubcf4\0\ubd4b\0\ubda2\0\ubdf9\0\ube50"+
    "\0\ubea7\0\ubefe\0\ubf55\0\127\0\ubfac\0\uc003\0\uc05a\0\uc0b1"+
    "\0\uc108\0\uc15f\0\uc1b6\0\127\0\uc20d\0\uc264\0\uc2bb\0\uc312"+
    "\0\uc369\0\uc3c0\0\127\0\uc417\0\uc46e\0\uc4c5\0\127\0\uc51c"+
    "\0\uc573\0\uc5ca\0\uc621\0\uc678\0\uc6cf\0\uc726\0\uc77d\0\uc7d4"+
    "\0\uc82b\0\uc882\0\uc8d9\0\127\0\uc930\0\uc987\0\uc9de\0\uca35"+
    "\0\uca8c\0\127\0\ucae3\0\ucb3a\0\ucb91\0\ucbe8\0\ucc3f\0\127"+
    "\0\ucc96\0\ucced\0\ucd44\0\ucd9b\0\ucdf2\0\127\0\uce49\0\ucea0"+
    "\0\127\0\ucef7\0\ucf4e\0\ucfa5\0\ucffc\0\ud053\0\ud0aa\0\127"+
    "\0\ud101\0\ud158\0\ud1af\0\ud206\0\ud25d\0\ud2b4\0\127\0\ud30b"+
    "\0\ud362\0\ud3b9\0\ud410\0\ud467\0\127\0\ud4be\0\ud515\0\ud56c"+
    "\0\ud5c3\0\ud61a\0\ud671\0\ud6c8\0\ud71f\0\ud776\0\ud7cd\0\ud824"+
    "\0\ud87b\0\ud8d2\0\ud929\0\ud980\0\ud9d7\0\uda2e\0\uda85\0\udadc"+
    "\0\udb33\0\udb8a\0\udbe1\0\udc38\0\udc8f\0\udce6\0\udd3d\0\udd94"+
    "\0\uddeb\0\ude42\0\ude99\0\udef0\0\udf47\0\udf9e\0\udff5\0\ue04c"+
    "\0\ue0a3\0\ue0fa\0\ue151\0\ue1a8\0\ue1ff\0\ue256\0\ue2ad\0\ue304"+
    "\0\ue35b\0\ue3b2\0\ue409\0\ue460\0\ue4b7\0\ue50e\0\ue565\0\ue5bc"+
    "\0\ue613\0\ue66a\0\ue6c1\0\ue718\0\ue76f\0\ue7c6\0\ue81d\0\ue874"+
    "\0\ue8cb\0\ue922\0\ue979\0\ue9d0\0\uea27\0\uea7e\0\uead5\0\ueb2c"+
    "\0\ueb83\0\uebda\0\uec31\0\uec88\0\uecdf\0\ued36\0\ued8d\0\uede4"+
    "\0\uee3b\0\uee92\0\ueee9\0\uef40\0\uef97\0\uefee\0\uf045\0\uf09c"+
    "\0\uf0f3\0\uf14a\0\uf1a1\0\uf1f8\0\uf24f\0\uf2a6\0\uf2fd\0\uf354"+
    "\0\uf3ab\0\uf402\0\uf459\0\uf4b0\0\uf507\0\uf55e\0\uf5b5\0\uf60c"+
    "\0\uf663\0\uf6ba\0\uf711\0\uf768\0\uf7bf\0\uf816\0\uf86d\0\uf8c4"+
    "\0\uf91b\0\uf972\0\uf9c9\0\ufa20\0\ufa77\0\uface\0\ufb25\0\ufb7c"+
    "\0\ufbd3\0\ufc2a\0\ufc81\0\ufcd8\0\ufd2f\0\ufd86\0\ufddd\0\ufe34"+
    "\0\ufe8b\0\ufee2\0\uff39\0\uff90\0\uffe7\1\76\1\225\1\354"+
    "\1\u0143\1\u019a\1\u01f1\1\u0248\1\u029f\1\u02f6\1\u034d\1\u03a4"+
    "\1\u03fb\1\u0452\1\u04a9\1\u0500\1\u0557\1\u05ae\1\u0605\1\u065c"+
    "\1\u06b3\1\u070a\1\u0761\1\u07b8\1\u080f\1\u0866\1\u08bd\1\u0914"+
    "\1\u096b\1\u09c2\1\u0a19\1\u0a70\1\u0ac7\1\u0b1e\1\u0b75\1\u0bcc"+
    "\1\u0c23\1\u0c7a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[954];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\2\1\23\1\2\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\2\1\33\1\34"+
    "\1\35\1\2\1\36\2\2\1\37\3\2\1\40\2\2"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\4\2\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\2\1\76"+
    "\1\77\2\2\1\100\1\2\1\101\1\102\1\2\130\0"+
    "\1\3\130\0\1\103\130\0\1\104\66\0\1\105\42\0"+
    "\1\106\63\0\1\107\46\0\1\110\12\0\1\111\26\0"+
    "\1\112\1\113\1\114\61\0\1\115\3\0\1\116\43\0"+
    "\1\117\1\120\55\0\1\121\3\0\1\122\25\0\1\123"+
    "\12\0\1\124\1\125\2\0\1\126\55\0\1\127\14\0"+
    "\1\130\14\0\1\131\111\0\1\132\115\0\1\133\43\0"+
    "\1\134\2\0\1\135\121\0\1\136\2\0\1\137\66\0"+
    "\1\140\47\0\1\141\45\0\1\142\44\0\1\143\3\0"+
    "\1\144\1\0\1\145\70\0\1\146\32\0\1\147\1\150"+
    "\60\0\1\151\2\0\1\152\1\0\1\153\34\0\1\154"+
    "\7\0\1\155\146\0\1\156\126\0\1\157\12\0\1\160"+
    "\116\0\1\161\11\0\1\162\36\0\1\163\55\0\1\164"+
    "\62\0\1\165\40\0\1\166\55\0\1\167\105\0\1\170"+
    "\40\0\1\171\1\172\1\173\116\0\1\174\22\0\1\175"+
    "\126\0\1\176\120\0\1\177\54\0\1\200\3\0\1\201"+
    "\7\0\1\202\14\0\1\203\10\0\1\204\2\0\1\205"+
    "\4\0\1\206\70\0\1\207\33\0\1\210\57\0\1\211"+
    "\1\212\40\0\1\213\7\0\1\214\56\0\1\215\10\0"+
    "\1\216\33\0\1\217\123\0\1\220\61\0\1\221\1\0"+
    "\1\222\1\223\1\0\1\224\23\0\1\225\23\0\1\226"+
    "\50\0\1\227\3\0\1\230\25\0\1\231\145\0\1\232"+
    "\136\0\1\233\10\0\1\234\117\0\1\235\124\0\1\236"+
    "\3\0\1\237\122\0\1\240\126\0\1\241\126\0\1\242"+
    "\126\0\1\243\7\0\1\244\1\245\115\0\1\246\10\0"+
    "\1\247\115\0\1\250\7\0\1\251\1\252\132\0\1\253"+
    "\51\0\1\254\55\0\1\255\51\0\1\256\11\0\1\257"+
    "\203\0\1\260\115\0\1\261\50\0\1\262\126\0\1\263"+
    "\57\0\1\264\132\0\1\265\36\0\1\266\132\0\1\267"+
    "\75\0\1\270\216\0\1\271\111\0\1\272\76\0\1\273"+
    "\112\0\1\274\141\0\1\275\34\0\1\276\124\0\1\277"+
    "\124\0\1\300\77\0\1\301\116\0\1\302\172\0\1\303"+
    "\122\0\1\304\132\0\1\305\60\0\1\306\174\0\1\307"+
    "\60\0\1\310\4\0\1\311\122\0\1\312\176\0\1\313"+
    "\115\0\1\314\130\0\1\315\61\0\1\316\1\0\1\317"+
    "\2\0\1\320\46\0\1\321\104\0\1\322\15\0\1\323"+
    "\134\0\1\324\54\0\1\325\41\0\1\326\64\0\1\327"+
    "\167\0\1\330\1\331\65\0\1\332\36\0\1\333\62\0"+
    "\1\334\131\0\1\335\123\0\1\336\14\0\1\337\113\0"+
    "\1\340\10\0\1\341\30\0\1\342\1\343\64\0\1\344"+
    "\155\0\1\345\126\0\1\346\111\0\1\347\116\0\1\350"+
    "\50\0\1\351\114\0\1\352\114\0\1\353\176\0\1\354"+
    "\124\0\1\355\44\0\1\356\211\0\1\357\43\0\1\360"+
    "\205\0\1\361\133\0\1\362\123\0\1\363\127\0\1\364"+
    "\26\0\1\365\141\0\1\366\30\0\1\367\1\0\1\370"+
    "\126\0\1\371\4\0\1\372\124\0\1\373\60\0\1\374"+
    "\140\0\1\375\30\0\1\376\130\0\1\377\56\0\1\u0100"+
    "\3\0\1\u0101\122\0\1\u0102\4\0\1\u0103\37\0\1\u0104"+
    "\137\0\1\u0105\116\0\1\u0106\117\0\1\u0107\104\0\1\u0108"+
    "\33\0\1\u0109\62\0\1\u010a\124\0\1\u010b\7\0\1\u010c"+
    "\120\0\1\u010d\177\0\1\u010e\121\0\1\u010f\62\0\1\u0110"+
    "\126\0\1\u0111\136\0\1\u0112\170\0\1\u0113\63\0\1\u0114"+
    "\127\0\1\u0115\116\0\1\u0116\136\0\1\u0117\115\0\1\u0118"+
    "\170\0\1\u0119\2\0\1\u011a\56\0\1\u011b\173\0\1\u011c"+
    "\143\0\1\u011d\124\0\1\u011e\126\0\1\u011f\126\0\1\u0120"+
    "\10\0\1\u0121\115\0\1\u0122\10\0\1\u0123\115\0\1\u0124"+
    "\144\0\1\u0125\131\0\1\u0126\130\0\1\u0127\123\0\1\u0128"+
    "\47\0\1\u0129\125\0\1\u012a\213\0\1\u012b\121\0\1\u012c"+
    "\135\0\1\u012d\122\0\1\u012e\132\0\1\u012f\131\0\1\u0130"+
    "\5\0\1\u0131\141\0\1\u0132\167\0\1\u0133\75\0\1\u0134"+
    "\114\0\1\u0135\123\0\1\u0136\143\0\1\u0137\111\0\1\u0138"+
    "\143\0\1\u0139\156\0\1\u013a\125\0\1\u013b\136\0\1\u013c"+
    "\65\0\1\u013d\113\0\1\u013e\126\0\1\u013f\143\0\1\u0140"+
    "\126\0\1\u0141\126\0\1\u0142\156\0\1\u0143\75\0\1\u0144"+
    "\144\0\1\u0145\145\0\1\u0146\72\0\1\u0147\126\0\1\u0148"+
    "\162\0\1\u0149\121\0\1\u014a\67\0\1\u014b\121\0\1\u014c"+
    "\142\0\1\u014d\125\0\1\u014e\130\0\1\u014f\155\0\1\u0150"+
    "\67\0\1\u0151\36\0\1\u0152\66\0\1\u0153\135\0\1\u0154"+
    "\113\0\1\u0155\174\0\1\u0156\73\0\1\u0157\130\0\1\u0158"+
    "\111\0\1\u0159\127\0\1\u015a\201\0\1\u015b\55\0\1\u015c"+
    "\140\0\1\u015d\156\0\1\u015e\76\0\1\u015f\111\0\1\u0160"+
    "\150\0\1\u0161\124\0\1\u0162\126\0\1\u0163\207\0\1\u0164"+
    "\135\0\1\u0165\114\0\1\u0166\50\0\1\u0167\124\0\1\u0168"+
    "\114\0\1\u0169\175\0\1\u016a\53\0\1\u016b\133\0\1\u016c"+
    "\124\0\1\u016d\174\0\1\u016e\60\0\1\u016f\130\0\1\u0170"+
    "\124\0\1\u0171\1\u0172\167\0\1\u0173\66\0\1\u0174\126\0"+
    "\1\u0175\5\0\1\u0176\145\0\1\u0177\13\0\1\u0178\125\0"+
    "\1\u0179\76\0\1\u017a\126\0\1\u017b\116\0\1\u017c\136\0"+
    "\1\u017d\112\0\1\u017e\131\0\1\u017f\171\0\1\u0180\131\0"+
    "\1\u0181\71\0\1\u0182\33\0\1\u0183\122\0\1\u0184\113\0"+
    "\1\u0185\145\0\1\u0186\122\0\1\u0187\76\0\1\u0188\126\0"+
    "\1\u0189\115\0\1\u018a\126\0\1\u018b\122\0\1\u018c\4\0"+
    "\1\u018d\127\0\1\u018e\125\0\1\u018f\166\0\1\u0190\64\0"+
    "\1\u0191\204\0\1\u0192\126\0\1\u0193\67\0\1\u0194\126\0"+
    "\1\u0195\206\0\1\u0196\43\0\1\u0197\217\0\1\u0198\52\0"+
    "\1\u0199\201\0\1\u019a\115\0\1\u019b\126\0\1\u019c\126\0"+
    "\1\u019d\52\0\1\u019e\130\0\1\u019f\71\0\1\u01a0\143\0"+
    "\1\u01a1\127\0\1\u01a2\124\0\1\u01a3\136\0\1\u01a4\157\0"+
    "\1\u01a5\134\0\1\u01a6\71\0\1\u01a7\116\0\1\u01a8\126\0"+
    "\1\u01a9\166\0\1\u01aa\75\0\1\u01ab\112\0\1\u01ac\172\0"+
    "\1\u01ad\4\0\1\u01ae\126\0\1\u01af\61\0\1\u01b0\130\0"+
    "\1\u01b1\171\0\1\u01b2\120\0\1\u01b3\115\0\1\u01b4\101\0"+
    "\1\u01b5\174\0\1\u01b6\117\0\1\u01b7\130\0\1\u01b8\65\0"+
    "\1\u01b9\173\0\1\u01ba\106\0\1\u01bb\150\0\1\u01bc\67\0"+
    "\1\u01bd\160\0\1\u01be\133\0\1\u01bf\117\0\1\u01c0\66\0"+
    "\1\u01c1\125\0\1\u01c2\170\0\1\u01c3\125\0\1\u01c4\171\0"+
    "\1\u01c5\121\0\1\u01c6\45\0\1\u01c7\60\0\1\u01c8\41\0"+
    "\1\u01c9\126\0\1\u01ca\211\0\1\u01cb\127\0\1\u01cc\126\0"+
    "\1\u01cd\73\0\1\u01ce\74\0\1\u01cf\113\0\1\u01d0\131\0"+
    "\1\u01d1\170\0\1\u01d2\63\0\1\u01d3\171\0\1\u01d4\74\0"+
    "\1\u01d5\126\0\1\u01d6\126\0\1\u01d7\157\0\1\u01d8\132\0"+
    "\1\u01d9\67\0\1\u01da\116\0\1\u01db\140\0\1\u01dc\124\0"+
    "\1\u01dd\117\0\1\u01de\135\0\1\u01df\164\0\1\u01e0\55\0"+
    "\1\u01e1\133\0\1\u01e2\125\0\1\u01e3\170\0\1\u01e4\136\0"+
    "\1\u01e5\64\0\1\u01e6\125\0\1\u01e7\117\0\1\u01e8\126\0"+
    "\1\u01e9\122\0\1\u01ea\202\0\1\u01eb\120\0\1\u01ec\60\0"+
    "\1\u01ed\143\0\1\u01ee\157\0\1\u01ef\104\0\1\u01f0\207\0"+
    "\1\u01f1\117\0\1\u01f2\52\0\1\u01f3\122\0\1\u01f4\205\0"+
    "\1\u01f5\131\0\1\u01f6\46\0\1\u01f7\205\0\1\u01f8\136\0"+
    "\1\u01f9\116\0\1\u01fa\133\0\1\u01fb\15\0\1\u01fc\133\0"+
    "\1\u01fd\142\0\1\u01fe\160\0\1\u01ff\125\0\1\u0200\74\0"+
    "\1\u0201\171\0\1\u0202\52\0\1\u0203\127\0\1\u0204\126\0"+
    "\1\u0205\140\0\1\u0206\113\0\1\u0207\124\0\1\u0208\174\0"+
    "\1\u0209\63\0\1\u020a\140\0\1\u020b\156\0\1\u020c\61\0"+
    "\1\u020d\131\0\1\u020e\123\0\1\u020f\174\0\1\u0210\75\0"+
    "\1\u0211\114\0\1\u0212\136\0\1\u0213\157\0\1\u0214\161\0"+
    "\1\u0215\53\0\1\u0216\206\0\1\u0217\44\0\1\u0218\124\0"+
    "\1\u0219\204\0\1\u021a\126\0\1\u021b\54\0\1\u021c\147\0"+
    "\1\u021d\74\0\1\u021e\130\0\1\u021f\126\0\1\u0220\116\0"+
    "\1\u0221\134\0\1\u0222\113\0\1\u0223\133\0\1\u0224\170\0"+
    "\1\u0225\73\0\1\u0226\117\0\1\u0227\174\0\1\u0228\55\0"+
    "\1\u0229\127\0\1\u022a\125\0\1\u022b\1\u022c\136\0\1\u022d"+
    "\120\0\1\u022e\122\0\1\u022f\173\0\1\u0230\65\0\1\u0231"+
    "\165\0\1\u0232\62\0\1\u0233\133\0\1\u0234\134\0\1\u0235"+
    "\126\0\1\u0236\133\0\1\u0237\130\0\1\u0238\203\0\1\u0239"+
    "\137\0\1\u023a\120\0\1\u023b\46\0\1\u023c\214\0\1\u023d"+
    "\116\0\1\u023e\133\0\1\u023f\127\0\1\u0240\122\0\1\u0241"+
    "\126\0\1\u0242\20\0\1\u0243\145\0\1\u0244\161\0\1\u0245"+
    "\131\0\1\u0246\125\0\1\u0247\131\0\1\u0248\53\0\1\u0249"+
    "\173\0\1\u024a\126\0\1\u024b\126\0\1\u024c\113\0\1\u024d"+
    "\110\0\1\u024e\117\0\1\u024f\166\0\1\u0250\75\0\1\u0251"+
    "\117\0\1\u0252\134\0\1\u0253\161\0\1\u0254\76\0\1\u0255"+
    "\130\0\1\u0256\210\0\1\u0257\126\0\1\u0258\126\0\1\u0259"+
    "\124\0\1\u025a\123\0\1\u025b\77\0\1\u025c\132\0\1\u025d"+
    "\120\0\1\u025e\127\0\1\u025f\130\0\1\u0260\57\0\1\u0261"+
    "\126\0\1\u0262\174\0\1\u0263\130\0\1\u0264\72\0\1\u0265"+
    "\163\0\1\u0266\122\0\1\u0267\76\0\1\u0268\116\0\1\u0269"+
    "\221\0\1\u026a\136\0\1\u026b\123\0\1\u026c\121\0\1\u026d"+
    "\52\0\1\u026e\123\0\1\u026f\202\0\1\u0270\136\0\1\u0271"+
    "\133\0\1\u0272\124\0\1\u0273\13\0\1\u0274\136\0\1\u0275"+
    "\124\0\1\u0276\126\0\1\u0277\136\0\1\u0278\163\0\1\u0279"+
    "\73\0\1\u027a\126\0\1\u027b\157\0\1\u027c\75\0\1\u027d"+
    "\116\0\1\u027e\223\0\1\u027f\124\0\1\u0280\132\0\1\u0281"+
    "\44\0\1\u0282\126\0\1\u0283\203\0\1\u0284\125\0\1\u0285"+
    "\74\0\1\u0286\77\0\1\u0287\116\0\1\u0288\166\0\1\u0289"+
    "\74\0\1\u028a\160\0\1\u028b\66\0\1\u028c\136\0\1\u028d"+
    "\115\0\1\u028e\137\0\1\u028f\212\0\1\u0290\51\0\1\u0291"+
    "\126\0\1\u0292\212\0\1\u0293\37\0\1\u0294\205\0\1\u0295"+
    "\52\0\1\u0296\124\0\1\u0297\202\0\1\u0298\20\0\1\u0299"+
    "\205\0\1\u029a\74\0\1\u029b\114\0\1\u029c\145\0\1\u029d"+
    "\205\0\1\u029e\135\0\1\u029f\37\0\1\u02a0\131\0\1\u02a1"+
    "\204\0\1\u02a2\31\0\1\u02a3\135\0\1\u02a4\163\0\1\u02a5"+
    "\72\0\1\u02a6\125\0\1\u02a7\213\0\1\u02a8\122\0\1\u02a9"+
    "\50\0\1\u02aa\131\0\1\u02ab\203\0\1\u02ac\133\0\1\u02ad"+
    "\126\0\1\u02ae\121\0\1\u02af\17\0\1\u02b0\205\0\1\u02b1"+
    "\103\0\1\u02b2\203\0\1\u02b3\51\0\1\u02b4\126\0\1\u02b5"+
    "\123\0\1\u02b6\127\0\1\u02b7\117\0\1\u02b8\135\0\1\u02b9"+
    "\202\0\1\u02ba\125\0\1\u02bb\54\0\1\u02bc\205\0\1\u02bd"+
    "\46\0\1\u02be\211\0\1\u02bf\10\0\1\u02c0\246\0\1\u02c1"+
    "\41\0\1\u02c2\201\0\1\u02c3\135\0\1\u02c4\44\0\1\u02c5"+
    "\214\0\1\u02c6\115\0\1\u02c7\131\0\1\u02c8\124\0\1\u02c9"+
    "\124\0\1\u02ca\140\0\1\u02cb\122\0\1\u02cc\15\0\1\u02cd"+
    "\241\0\1\u02ce\117\0\1\u02cf\125\0\1\u02d0\132\0\1\u02d1"+
    "\47\0\1\u02d2\121\0\1\u02d3\212\0\1\u02d4\46\0\1\u02d5"+
    "\124\0\1\u02d6\205\0\1\u02d7\125\0\1\u02d8\25\0\1\u02d9"+
    "\235\0\1\u02da\124\0\1\u02db\126\0\1\u02dc\134\0\1\u02dd"+
    "\114\0\1\u02de\125\0\1\u02df\141\0\1\u02e0\121\0\1\u02e1"+
    "\121\0\1\u02e2\127\0\1\u02e3\16\0\1\u02e4\235\0\1\u02e5"+
    "\52\0\1\u02e6\202\0\1\u02e7\127\0\1\u02e8\45\0\1\u02e9"+
    "\134\0\1\u02ea\204\0\1\u02eb\131\0\1\u02ec\17\0\1\u02ed"+
    "\237\0\1\u02ee\127\0\1\u02ef\115\0\1\u02f0\125\0\1\u02f1"+
    "\125\0\1\u02f2\51\0\1\u02f3\204\0\1\u02f4\25\0\1\u02f5"+
    "\237\0\1\u02f6\36\0\1\u02f7\215\0\1\u02f8\123\0\1\u02f9"+
    "\124\0\1\u02fa\126\0\1\u02fb\15\0\1\u02fc\244\0\1\u02fd"+
    "\116\0\1\u02fe\127\0\1\u02ff\131\0\1\u0300\124\0\1\u0301"+
    "\24\0\1\u0302\155\0\1\u0303\202\0\1\u0304\127\0\1\u0305"+
    "\14\0\1\u0306\243\0\1\u0307\121\0\1\u0308\51\0\1\u0309"+
    "\103\0\1\u030a\231\0\1\u030b\123\0\1\u030c\24\0\1\u030d"+
    "\241\0\1\u030e\120\0\1\u030f\13\0\1\u0310\235\0\1\u0311"+
    "\30\0\1\u0312\225\0\1\u0313\24\0\1\u0314\236\0\1\u0315"+
    "\10\0\1\u0316\140\0\1\u0317\122\0\1\u0318\120\0\1\u0319"+
    "\141\0\1\u031a\121\0\1\u031b\120\0\1\u031c\142\0\1\u031d"+
    "\120\0\1\u031e\120\0\1\u031f\143\0\1\u0320\117\0\1\u0321"+
    "\120\0\1\u0322\144\0\1\u0323\116\0\1\u0324\120\0\1\u0325"+
    "\145\0\1\u0326\127\0\1\u0327\114\0\1\u0328\121\0\1\u0329"+
    "\125\0\1\u032a\147\0\1\u032b\107\0\1\u032c\134\0\1\u032d"+
    "\140\0\1\u032e\127\0\1\u032f\114\0\1\u0330\127\0\1\u0331"+
    "\140\0\1\u0332\127\0\1\u0333\127\0\1\u0334\113\0\1\u0335"+
    "\142\0\1\u0336\127\0\1\u0337\127\0\1\u0338\127\0\1\u0339"+
    "\127\0\1\u033a\127\0\1\u033b\127\0\1\u033c\76\0\1\u033d"+
    "\157\0\1\u033e\127\0\1\u033f\127\0\1\u0340\106\0\1\u0341"+
    "\114\0\1\u0342\121\0\1\u0343\125\0\1\u0344\130\0\1\u0345"+
    "\134\0\1\u0346\140\0\1\u0347\145\0\1\u0348\72\0\1\u0349"+
    "\141\0\1\u034a\114\0\1\u034b\121\0\1\u034c\125\0\1\u034d"+
    "\130\0\1\u034e\134\0\1\u034f\140\0\1\u0350\145\0\1\u0351"+
    "\72\0\1\u0352\157\0\1\u0353\127\0\1\u0354\127\0\1\u0355"+
    "\106\0\1\u0356\114\0\1\u0357\121\0\1\u0358\125\0\1\u0359"+
    "\130\0\1\u035a\134\0\1\u035b\140\0\1\u035c\145\0\1\u035d"+
    "\72\0\1\u035e\157\0\1\u035f\132\0\1\u0360\124\0\1\u0361"+
    "\106\0\1\u0362\114\0\1\u0363\121\0\1\u0364\125\0\1\u0365"+
    "\171\0\1\u0366\65\0\1\u0367\134\0\1\u0368\140\0\1\u0369"+
    "\127\0\1\u036a\114\0\1\u036b\127\0\1\u036c\140\0\1\u036d"+
    "\127\0\1\u036e\127\0\1\u036f\113\0\1\u0370\142\0\1\u0371"+
    "\127\0\1\u0372\127\0\1\u0373\127\0\1\u0374\127\0\1\u0375"+
    "\127\0\1\u0376\127\0\1\u0377\76\0\1\u0378\157\0\1\u0379"+
    "\134\0\1\u037a\122\0\1\u037b\106\0\1\u037c\114\0\1\u037d"+
    "\121\0\1\u037e\125\0\1\u037f\173\0\1\u0380\63\0\1\u0381"+
    "\134\0\1\u0382\140\0\1\u0383\127\0\1\u0384\114\0\1\u0385"+
    "\127\0\1\u0386\140\0\1\u0387\127\0\1\u0388\127\0\1\u0389"+
    "\113\0\1\u038a\142\0\1\u038b\127\0\1\u038c\127\0\1\u038d"+
    "\127\0\1\u038e\127\0\1\u038f\127\0\1\u0390\127\0\1\u0391"+
    "\76\0\1\u0392\157\0\1\u0393\136\0\1\u0394\120\0\1\u0395"+
    "\106\0\1\u0396\114\0\1\u0397\121\0\1\u0398\125\0\1\u0399"+
    "\175\0\1\u039a\60\0\1\u039b\127\0\1\u039c\135\0\1\u039d"+
    "\137\0\1\u039e\154\0\1\u039f\105\0\1\u03a0\121\0\1\u03a1"+
    "\155\0\1\u03a2\112\0\1\u03a3\76\0\1\u03a4\141\0\1\u03a5"+
    "\107\0\1\u03a6\127\0\1\u03a7\135\0\1\u03a8\137\0\1\u03a9"+
    "\154\0\1\u03aa\105\0\1\u03ab\121\0\1\u03ac\155\0\1\u03ad"+
    "\65\0\1\u03ae\140\0\1\u03af\127\0\1\u03b0\140\0\1\u03b1"+
    "\76\0\1\u03b2\141\0\1\u03b3\160\0\1\u03b4\127\0\1\u03b5"+
    "\73\0\1\u03b6\126\0\1\u03b7\126\0\1\u03b8\160\0\1\u03b9"+
    "\54\0\1\u03ba\152\0\2\u03ba\26\0\1\u03ba\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[68817];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\12\1\2\11\3\1\1\11\11\1\1\11"+
    "\1\1\1\11\1\1\1\11\7\1\1\11\12\1\1\0"+
    "\1\1\3\11\3\0\1\1\3\0\1\1\20\0\2\11"+
    "\6\0\1\1\23\0\3\11\12\0\1\11\1\1\1\11"+
    "\6\0\1\11\10\0\2\11\1\1\6\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\0\1\11\14\0\1\11\1\0"+
    "\1\11\16\0\1\1\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\36\0\1\11\20\0\1\11\6\0\1\11\2\0"+
    "\1\1\2\0\1\11\5\0\1\11\6\0\4\11\1\1"+
    "\1\11\1\1\1\11\22\0\1\11\1\0\2\11\1\0"+
    "\1\11\6\0\1\11\3\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\0\1\11\3\0\1\11\7\0\1\11\3\0"+
    "\1\11\20\0\2\11\16\0\2\11\1\0\1\11\2\0"+
    "\1\11\12\0\3\11\16\0\1\11\1\0\4\11\1\0"+
    "\1\11\1\0\1\11\7\0\1\11\2\0\2\11\1\0"+
    "\1\11\7\0\1\11\7\0\1\11\10\0\1\11\1\0"+
    "\4\11\6\0\1\11\3\0\1\11\2\0\2\11\34\0"+
    "\1\11\1\0\3\11\11\0\2\11\1\0\1\11\2\0"+
    "\1\11\7\0\1\11\1\0\2\11\1\0\6\11\4\0"+
    "\1\11\3\0\1\11\3\0\1\11\3\0\1\11\4\0"+
    "\1\11\7\0\2\11\2\0\1\11\2\0\3\11\2\0"+
    "\1\11\14\0\1\11\3\0\1\11\2\0\2\11\6\0"+
    "\1\11\5\0\1\11\1\0\1\11\1\0\3\11\1\0"+
    "\2\11\2\0\1\11\6\0\1\11\2\0\4\11\4\0"+
    "\1\11\6\0\2\11\7\0\2\11\1\0\2\11\4\0"+
    "\1\11\4\0\1\11\6\0\1\11\6\0\1\11\14\0"+
    "\1\11\7\0\1\11\6\0\1\11\3\0\1\11\14\0"+
    "\1\11\5\0\1\11\5\0\1\11\5\0\1\11\2\0"+
    "\1\11\6\0\1\11\6\0\1\11\5\0\1\11\244\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[954];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _CSharpLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { return OP_TILDA_EQ;
          }
        case 196: break;
        case 128: 
          { return KW_TYPEOF;
          }
        case 197: break;
        case 194: 
          { return ALTERNATE_WYSIWYG_STRING;
          }
        case 198: break;
        case 101: 
          { return OP_USH_RIGHT_EQ;
          }
        case 199: break;
        case 141: 
          { return KW_SIZEOF;
          }
        case 200: break;
        case 133: 
          { return KW_UNSAFE;
          }
        case 201: break;
        case 126: 
          { return KW_RETURN;
          }
        case 202: break;
        case 37: 
          { return KW_DO;
          }
        case 203: break;
        case 156: 
          { return KW_PARTIAL;
          }
        case 204: break;
        case 174: 
          { return KW_NAMESPACE;
          }
        case 205: break;
        case 97: 
          { return KW_LOCK;
          }
        case 206: break;
        case 186: 
          { return FLOAT_LITERAL;
          }
        case 207: break;
        case 192: 
          { return FUNCTION_DEFINITION;
          }
        case 208: break;
        case 22: 
          { return OP_DIV;
          }
        case 209: break;
        case 122: 
          { return KW_SHORT;
          }
        case 210: break;
        case 68: 
          { return DOT;
          }
        case 211: break;
        case 190: 
          { return CHARACTER_LITERAL;
          }
        case 212: break;
        case 159: 
          { return KW_ABSTRACT;
          }
        case 213: break;
        case 106: 
          { return KW_BREAK;
          }
        case 214: break;
        case 119: 
          { return KW_WHILE;
          }
        case 215: break;
        case 55: 
          { return OP_LESS_GR;
          }
        case 216: break;
        case 26: 
          { return OP_GT;
          }
        case 217: break;
        case 134: 
          { return KW_USHORT;
          }
        case 218: break;
        case 56: 
          { return OP_GT_EQ;
          }
        case 219: break;
        case 85: 
          { return KW_FROM;
          }
        case 220: break;
        case 86: 
          { return KW_NULL;
          }
        case 221: break;
        case 65: 
          { return KW_NEW;
          }
        case 222: break;
        case 176: 
          { return KW_UNCHECKED;
          }
        case 223: break;
        case 40: 
          { return OP_MUL_EQ;
          }
        case 224: break;
        case 120: 
          { return KW_SBYTE;
          }
        case 225: break;
        case 163: 
          { return KW_CONTINUE;
          }
        case 226: break;
        case 20: 
          { return OP_AT;
          }
        case 227: break;
        case 43: 
          { return KW_IS;
          }
        case 228: break;
        case 118: 
          { return KW_WHERE;
          }
        case 229: break;
        case 79: 
          { return OP_NOT_LESS_EQ;
          }
        case 230: break;
        case 95: 
          { return KW_WHEN;
          }
        case 231: break;
        case 82: 
          { return KW_BASE;
          }
        case 232: break;
        case 19: 
          { return OP_DOT;
          }
        case 233: break;
        case 147: 
          { return KW_FINALLY;
          }
        case 234: break;
        case 7: 
          { return OP_OR;
          }
        case 235: break;
        case 78: 
          { return OP_USH_RIGHT;
          }
        case 236: break;
        case 53: 
          { return OP_LESS_EQ;
          }
        case 237: break;
        case 41: 
          { return KW_IF;
          }
        case 238: break;
        case 179: 
          { return SEMICOLON;
          }
        case 239: break;
        case 33: 
          { return KW_AS;
          }
        case 240: break;
        case 34: 
          { return KW_BY;
          }
        case 241: break;
        case 129: 
          { return KW_DOUBLE;
          }
        case 242: break;
        case 191: 
          { return MODULE_DEFINITION;
          }
        case 243: break;
        case 60: 
          { return OP_NOT_GR;
          }
        case 244: break;
        case 166: 
          { return BRACKETS;
          }
        case 245: break;
        case 113: 
          { return KW_CONST;
          }
        case 246: break;
        case 108: 
          { return KW_FLOAT;
          }
        case 247: break;
        case 24: 
          { return OP_TILDA;
          }
        case 248: break;
        case 181: 
          { return KW_STACKALLOC;
          }
        case 249: break;
        case 149: 
          { return KW_VIRTUAL;
          }
        case 250: break;
        case 110: 
          { return KW_THROW;
          }
        case 251: break;
        case 35: 
          { return OP_MINUS_MINUS;
          }
        case 252: break;
        case 57: 
          { return OP_SH_RIGHT;
          }
        case 253: break;
        case 116: 
          { return KW_USING;
          }
        case 254: break;
        case 178: 
          { return KW_PROTECTED;
          }
        case 255: break;
        case 109: 
          { return KW_FIXED;
          }
        case 256: break;
        case 100: 
          { return KW_JOIN;
          }
        case 257: break;
        case 13: 
          { return OP_AND;
          }
        case 258: break;
        case 58: 
          { return OP_NOT_EQ;
          }
        case 259: break;
        case 27: 
          { return OP_NOT;
          }
        case 260: break;
        case 63: 
          { return KW_ADD;
          }
        case 261: break;
        case 112: 
          { return KW_CLASS;
          }
        case 262: break;
        case 17: 
          { return OP_EQ;
          }
        case 263: break;
        case 155: 
          { return KW_ORDERBY;
          }
        case 264: break;
        case 66: 
          { return KW_REF;
          }
        case 265: break;
        case 177: 
          { return KW_INTERFACE;
          }
        case 266: break;
        case 172: 
          { return OPERATOR;
          }
        case 267: break;
        case 81: 
          { return OP_NOT_GR_EQ;
          }
        case 268: break;
        case 75: 
          { return OP_SH_LEFT_EQ;
          }
        case 269: break;
        case 127: 
          { return KW_REMOVE;
          }
        case 270: break;
        case 114: 
          { return KW_EVENT;
          }
        case 271: break;
        case 137: 
          { return KW_STRING;
          }
        case 272: break;
        case 102: 
          { return OP_UNORD;
          }
        case 273: break;
        case 143: 
          { return KW_PARAMS;
          }
        case 274: break;
        case 131: 
          { return KW_EQUALS;
          }
        case 275: break;
        case 121: 
          { return KW_SUPER;
          }
        case 276: break;
        case 152: 
          { return KW_DECIMAL;
          }
        case 277: break;
        case 8: 
          { return OP_QUEST;
          }
        case 278: break;
        case 23: 
          { return OP_MOD;
          }
        case 279: break;
        case 12: 
          { return OP_BRACES_RIGHT;
          }
        case 280: break;
        case 38: 
          { return OP_BOOL_AND;
          }
        case 281: break;
        case 135: 
          { return KW_STATIC;
          }
        case 282: break;
        case 62: 
          { return OP_POW_EQ;
          }
        case 283: break;
        case 73: 
          { return KW_OUT;
          }
        case 284: break;
        case 145: 
          { return NUMBER;
          }
        case 285: break;
        case 77: 
          { return OP_SH_RIGHT_EQ;
          }
        case 286: break;
        case 50: 
          { return OP_DIV_EQ;
          }
        case 287: break;
        case 46: 
          { return OP_LAMBDA_ARROW;
          }
        case 288: break;
        case 161: 
          { return KW_READONLY;
          }
        case 289: break;
        case 184: 
          { return LINE_COMMENT;
          }
        case 290: break;
        case 45: 
          { return OP_EQ_EQ;
          }
        case 291: break;
        case 69: 
          { return KW_SET;
          }
        case 292: break;
        case 132: 
          { return BRACES;
          }
        case 293: break;
        case 183: 
          { return PARENTHESES;
          }
        case 294: break;
        case 150: 
          { return KW_CHECKED;
          }
        case 295: break;
        case 47: 
          { return OP_DDOT;
          }
        case 296: break;
        case 148: 
          { return KW_FOREACH;
          }
        case 297: break;
        case 99: 
          { return KW_GOTO;
          }
        case 298: break;
        case 92: 
          { return KW_ENUM;
          }
        case 299: break;
        case 25: 
          { return OP_LESS;
          }
        case 300: break;
        case 146: 
          { return STRING;
          }
        case 301: break;
        case 44: 
          { return KW_ON;
          }
        case 302: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 303: break;
        case 6: 
          { return OP_BRACKET_RIGHT;
          }
        case 304: break;
        case 4: 
          { return OP_BRACKET_LEFT;
          }
        case 305: break;
        case 91: 
          { return KW_CHAR;
          }
        case 306: break;
        case 49: 
          { return OP_PLUS_PLUS;
          }
        case 307: break;
        case 16: 
          { return OP_COLON;
          }
        case 308: break;
        case 80: 
          { return OP_UNORD_EQ;
          }
        case 309: break;
        case 124: 
          { return KW_YIELD;
          }
        case 310: break;
        case 29: 
          { return OP_POW;
          }
        case 311: break;
        case 136: 
          { return KW_STRUCT;
          }
        case 312: break;
        case 3: 
          { return OP_PAR_LEFT;
          }
        case 313: break;
        case 117: 
          { return KW_ULONG;
          }
        case 314: break;
        case 42: 
          { return KW_IN;
          }
        case 315: break;
        case 167: 
          { return KW_UNITTEST;
          }
        case 316: break;
        case 15: 
          { return OP_SCOLON;
          }
        case 317: break;
        case 88: 
          { return KW_THIS;
          }
        case 318: break;
        case 195: 
          { return DOUBLE_QUOTED_STRING;
          }
        case 319: break;
        case 189: 
          { return DELIMITED_STRING;
          }
        case 320: break;
        case 171: 
          { return KW_OPERATOR;
          }
        case 321: break;
        case 59: 
          { return OP_NOT_LESS;
          }
        case 322: break;
        case 140: 
          { return KW_SWITCH;
          }
        case 323: break;
        case 154: 
          { return SHEBANG;
          }
        case 324: break;
        case 111: 
          { return KW_CATCH;
          }
        case 325: break;
        case 185: 
          { return BLOCK_COMMENT;
          }
        case 326: break;
        case 67: 
          { return KW_TRY;
          }
        case 327: break;
        case 28: 
          { return OP_DOLLAR;
          }
        case 328: break;
        case 173: 
          { return KW_ASCENDING;
          }
        case 329: break;
        case 5: 
          { return OP_XOR;
          }
        case 330: break;
        case 182: 
          { return HEX_STRING;
          }
        case 331: break;
        case 84: 
          { return KW_BOOL;
          }
        case 332: break;
        case 14: 
          { return OP_ASTERISK;
          }
        case 333: break;
        case 30: 
          { return OP_XOR_EQ;
          }
        case 334: break;
        case 125: 
          { return KW_NAMEOF;
          }
        case 335: break;
        case 98: 
          { return KW_INTO;
          }
        case 336: break;
        case 71: 
          { return KW_INT;
          }
        case 337: break;
        case 64: 
          { return KW_FOR;
          }
        case 338: break;
        case 160: 
          { return KW_FUNCTION;
          }
        case 339: break;
        case 180: 
          { return KW_DESCENDING;
          }
        case 340: break;
        case 93: 
          { return KW_ELSE;
          }
        case 341: break;
        case 130: 
          { return KW_EXTERN;
          }
        case 342: break;
        case 175: 
          { return KW_ARGLIST;
          }
        case 343: break;
        case 144: 
          { return KW_PUBLIC;
          }
        case 344: break;
        case 74: 
          { return OP_TRIPLEDOT;
          }
        case 345: break;
        case 31: 
          { return OP_BOOL_OR;
          }
        case 346: break;
        case 105: 
          { return KW_ALIAS;
          }
        case 347: break;
        case 153: 
          { return KW_DYNAMIC;
          }
        case 348: break;
        case 89: 
          { return KW_VOID;
          }
        case 349: break;
        case 103: 
          { return KW_AWAIT;
          }
        case 350: break;
        case 107: 
          { return KW_FALSE;
          }
        case 351: break;
        case 32: 
          { return OP_OR_EQ;
          }
        case 352: break;
        case 87: 
          { return KW_TRUE;
          }
        case 353: break;
        case 48: 
          { return OP_PLUS_EQ;
          }
        case 354: break;
        case 96: 
          { return KW_LONG;
          }
        case 355: break;
        case 138: 
          { return KW_SEALED;
          }
        case 356: break;
        case 10: 
          { return OP_MINUS;
          }
        case 357: break;
        case 158: 
          { return KEYWORD;
          }
        case 358: break;
        case 142: 
          { return KW_OBJECT;
          }
        case 359: break;
        case 187: 
          { return WYSIWYG_STRING;
          }
        case 360: break;
        case 9: 
          { return OP_PAR_RIGHT;
          }
        case 361: break;
        case 18: 
          { return OP_COMMA;
          }
        case 362: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 363: break;
        case 51: 
          { return OP_MOD_EQ;
          }
        case 364: break;
        case 72: 
          { return KW_GET;
          }
        case 365: break;
        case 21: 
          { return OP_PLUS;
          }
        case 366: break;
        case 39: 
          { return OP_AND_EQ;
          }
        case 367: break;
        case 115: 
          { return COMMA;
          }
        case 368: break;
        case 83: 
          { return KW_BYTE;
          }
        case 369: break;
        case 170: 
          { return KW_OVERRIDE;
          }
        case 370: break;
        case 162: 
          { return KW_VOLATILE;
          }
        case 371: break;
        case 94: 
          { return KW_UINT;
          }
        case 372: break;
        case 139: 
          { return KW_SELECT;
          }
        case 373: break;
        case 90: 
          { return KW_CASE;
          }
        case 374: break;
        case 164: 
          { return KW_DELEGATE;
          }
        case 375: break;
        case 104: 
          { return KW_ASYNC;
          }
        case 376: break;
        case 193: 
          { return NESTING_BLOCK_COMMENT;
          }
        case 377: break;
        case 188: 
          { return INTEGER_LITERAL;
          }
        case 378: break;
        case 169: 
          { return KW_IMPLICIT;
          }
        case 379: break;
        case 61: 
          { return ID;
          }
        case 380: break;
        case 11: 
          { return OP_BRACES_LEFT;
          }
        case 381: break;
        case 54: 
          { return OP_SH_LEFT;
          }
        case 382: break;
        case 168: 
          { return KW_INTERNAL;
          }
        case 383: break;
        case 157: 
          { return KW_PRIVATE;
          }
        case 384: break;
        case 36: 
          { return OP_MINUS_EQ;
          }
        case 385: break;
        case 151: 
          { return KW_DEFAULT;
          }
        case 386: break;
        case 70: 
          { return KW_LET;
          }
        case 387: break;
        case 76: 
          { return OP_LESS_GR_EQ;
          }
        case 388: break;
        case 165: 
          { return KW_EXPLICIT;
          }
        case 389: break;
        case 123: 
          { return KW_GROUP;
          }
        case 390: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
