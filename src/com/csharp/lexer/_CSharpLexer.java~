/* The following code was generated by JFlex 1.4.3 on 4/6/16 4:42 PM */

package com.csharp.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.csharp.CSharpTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/6/16 4:42 PM from the specification file
 * <tt>C:/Users/rescas/IdeaProjects/intellij-csharp/src/com/csharp/lexer/_CSharpLexer.flex</tt>
 */
public class _CSharpLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\106\1\6"+
    "\1\0\1\107\1\102\1\51\1\0\1\3\1\22\1\54\1\100\1\75"+
    "\1\24\1\76\1\101\1\12\1\0\1\41\1\44\1\46\2\0\1\43"+
    "\1\50\1\25\1\73\1\55\1\104\1\74\1\105\1\11\1\77\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\120\1\125\1\111\1\130\1\116"+
    "\1\110\1\114\1\112\1\113\1\124\1\127\1\123\1\117\1\115\1\47"+
    "\1\131\1\122\1\126\1\121\1\53\1\4\1\2\1\7\1\5\1\37"+
    "\1\0\1\13\1\14\1\26\1\27\1\30\1\15\1\62\1\66\1\61"+
    "\1\72\1\65\1\60\1\67\1\16\1\64\1\71\1\70\1\17\1\57"+
    "\1\20\1\45\1\21\1\56\1\23\1\63\1\52\1\40\1\10\1\42"+
    "\1\103\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\7\1\1\11\1\12\12\1\1\13\1\14"+
    "\1\1\1\15\1\16\1\17\11\1\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\16\1\1\0\1\35\1\36\1\37\1\40"+
    "\3\0\1\41\3\0\1\42\20\0\1\43\1\44\6\0"+
    "\1\45\13\0\1\46\17\0\1\47\1\50\1\51\12\0"+
    "\1\52\1\53\1\54\6\0\1\55\10\0\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\2\0\1\76"+
    "\4\0\1\77\20\0\1\100\1\0\1\101\16\0\1\102"+
    "\1\0\1\103\2\0\1\104\3\0\1\105\30\0\1\106"+
    "\14\0\1\107\23\0\1\110\6\0\1\111\2\0\1\112"+
    "\2\0\1\113\5\0\1\114\6\0\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\14\0\1\126"+
    "\1\0\1\127\16\0\1\130\1\0\1\131\1\132\1\0"+
    "\1\133\6\0\1\134\3\0\1\135\2\0\1\136\2\0"+
    "\1\137\1\0\1\140\3\0\1\141\7\0\1\142\3\0"+
    "\1\143\21\0\1\144\7\0\1\145\1\146\16\0\1\147"+
    "\1\150\1\0\1\151\2\0\1\152\12\0\1\153\1\154"+
    "\1\155\3\0\1\156\15\0\1\157\5\0\1\160\2\0"+
    "\1\161\1\0\1\162\1\163\1\164\1\165\1\0\1\166"+
    "\1\0\1\167\7\0\1\170\2\0\1\171\1\172\1\0"+
    "\1\173\7\0\1\174\3\0\1\175\2\0\1\176\1\177"+
    "\4\0\1\200\13\0\1\201\1\0\1\202\1\203\1\204"+
    "\1\205\6\0\1\206\3\0\1\207\2\0\1\210\1\211"+
    "\26\0\1\212\1\213\1\0\1\214\13\0\1\215\1\0"+
    "\1\216\1\217\1\220\11\0\1\221\1\222\1\0\1\223"+
    "\4\0\1\224\5\0\1\225\4\0\1\226\1\0\1\227"+
    "\1\230\1\0\1\231\1\232\1\233\1\234\1\235\1\236"+
    "\4\0\1\237\3\0\1\240\3\0\1\241\3\0\1\242"+
    "\1\0\1\243\4\0\1\244\1\0\1\245\1\0\1\246"+
    "\7\0\1\247\1\250\2\0\1\251\2\0\1\252\1\253"+
    "\1\254\2\0\1\255\3\0\1\256\5\0\1\257\6\0"+
    "\1\260\3\0\1\261\2\0\1\262\1\263\5\0\1\264"+
    "\2\0\1\265\3\0\1\266\2\0\1\267\1\0\1\270"+
    "\1\0\1\271\1\272\1\273\1\0\1\274\1\275\3\0"+
    "\1\276\7\0\1\277\2\0\1\300\1\301\1\302\1\303"+
    "\5\0\1\304\6\0\1\305\1\306\2\0\1\307\6\0"+
    "\1\310\1\311\1\0\1\312\1\313\5\0\1\314\4\0"+
    "\1\315\4\0\1\316\2\0\1\317\1\0\1\320\5\0"+
    "\1\321\14\0\1\322\7\0\1\323\6\0\1\324\3\0"+
    "\1\325\14\0\1\326\5\0\1\327\5\0\1\330\5\0"+
    "\1\331\2\0\1\332\6\0\1\333\6\0\1\334\5\0"+
    "\1\335\244\0\1\336";

  private static int [] zzUnpackAction() {
    int [] result = new int[1063];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\132\0\264\0\u010e\0\132\0\132\0\u0168\0\132"+
    "\0\u01c2\0\132\0\u021c\0\u0276\0\u02d0\0\u032a\0\u0384\0\u03de"+
    "\0\u0438\0\132\0\u0492\0\u04ec\0\u0546\0\u05a0\0\u05fa\0\u0654"+
    "\0\u06ae\0\u0708\0\u0762\0\u07bc\0\u0816\0\132\0\132\0\u0870"+
    "\0\u08ca\0\u0924\0\132\0\u097e\0\u09d8\0\u0a32\0\u0a8c\0\u0ae6"+
    "\0\u0b40\0\u0b9a\0\u0bf4\0\u0c4e\0\132\0\u0ca8\0\132\0\u0d02"+
    "\0\132\0\u0d5c\0\u0db6\0\u0e10\0\u0e6a\0\u0ec4\0\u0f1e\0\u0f78"+
    "\0\132\0\u0fd2\0\u102c\0\u1086\0\u10e0\0\u113a\0\u1194\0\u11ee"+
    "\0\u1248\0\u12a2\0\u12fc\0\u1356\0\u13b0\0\u140a\0\u1464\0\u14be"+
    "\0\u1518\0\132\0\132\0\132\0\u1572\0\u15cc\0\u1626\0\u1680"+
    "\0\u16da\0\u1734\0\u178e\0\u17e8\0\u1842\0\u189c\0\u18f6\0\u1950"+
    "\0\u19aa\0\u1a04\0\u1a5e\0\u1ab8\0\u1b12\0\u1b6c\0\u1bc6\0\u1c20"+
    "\0\u1c7a\0\u1cd4\0\u1d2e\0\u1d88\0\132\0\132\0\u1de2\0\u1e3c"+
    "\0\u1e96\0\u1ef0\0\u1f4a\0\u1fa4\0\u1ffe\0\u2058\0\u20b2\0\u210c"+
    "\0\u2166\0\u21c0\0\u221a\0\u2274\0\u22ce\0\u2328\0\u2382\0\u23dc"+
    "\0\132\0\u2436\0\u2490\0\u24ea\0\u2544\0\u259e\0\u25f8\0\u2652"+
    "\0\u26ac\0\u2706\0\u2760\0\u27ba\0\u2814\0\u286e\0\u28c8\0\u2922"+
    "\0\132\0\132\0\132\0\u297c\0\u29d6\0\u2a30\0\u2a8a\0\u2ae4"+
    "\0\u2b3e\0\u2b98\0\u2bf2\0\u2c4c\0\u2ca6\0\132\0\u2d00\0\132"+
    "\0\u2d5a\0\u2db4\0\u2e0e\0\u2e68\0\u2ec2\0\u2f1c\0\132\0\u2f76"+
    "\0\u2fd0\0\u302a\0\u3084\0\u30de\0\u3138\0\u3192\0\u31ec\0\132"+
    "\0\132\0\u3246\0\132\0\132\0\132\0\132\0\132\0\132"+
    "\0\u32a0\0\u32fa\0\132\0\u3354\0\132\0\u33ae\0\u3408\0\u3462"+
    "\0\u34bc\0\u3516\0\u3570\0\u35ca\0\u3624\0\u367e\0\132\0\u36d8"+
    "\0\u3732\0\u378c\0\u37e6\0\u3840\0\u389a\0\u38f4\0\u394e\0\u39a8"+
    "\0\u3a02\0\u3a5c\0\u3ab6\0\u3b10\0\u3b6a\0\u3bc4\0\u3c1e\0\132"+
    "\0\u3c78\0\132\0\u3cd2\0\u3d2c\0\u3d86\0\u3de0\0\u3e3a\0\u3e94"+
    "\0\u3eee\0\u3f48\0\u3fa2\0\u3ffc\0\u4056\0\u40b0\0\u410a\0\u4164"+
    "\0\u41be\0\u4218\0\132\0\u4272\0\u42cc\0\132\0\u4326\0\u4380"+
    "\0\u43da\0\132\0\u4434\0\u448e\0\u44e8\0\u4542\0\u459c\0\u45f6"+
    "\0\u4650\0\u46aa\0\u4704\0\u475e\0\u47b8\0\u4812\0\u486c\0\u48c6"+
    "\0\u4920\0\u497a\0\u49d4\0\u4a2e\0\u4a88\0\u4ae2\0\u4b3c\0\u4b96"+
    "\0\u4bf0\0\u4c4a\0\132\0\u4ca4\0\u4cfe\0\u4d58\0\u4db2\0\u4e0c"+
    "\0\u4e66\0\u4ec0\0\u4f1a\0\u4f74\0\u4fce\0\u5028\0\u5082\0\132"+
    "\0\u50dc\0\u5136\0\u5190\0\u51ea\0\u5244\0\u529e\0\u52f8\0\u5352"+
    "\0\u53ac\0\u5406\0\u5460\0\u54ba\0\u5514\0\u556e\0\u55c8\0\u5622"+
    "\0\u567c\0\u56d6\0\u5730\0\132\0\u578a\0\u57e4\0\u583e\0\u5898"+
    "\0\u58f2\0\u594c\0\132\0\u59a6\0\u5a00\0\u5a5a\0\u5ab4\0\u5b0e"+
    "\0\132\0\u5b68\0\u5bc2\0\u5c1c\0\u5c76\0\u5cd0\0\132\0\u5d2a"+
    "\0\u5d84\0\u5dde\0\u5e38\0\u5e92\0\u5eec\0\132\0\132\0\132"+
    "\0\132\0\u5f46\0\132\0\u5fa0\0\132\0\132\0\u5ffa\0\u6054"+
    "\0\u60ae\0\u6108\0\u6162\0\u61bc\0\u6216\0\u6270\0\u62ca\0\u6324"+
    "\0\u637e\0\u63d8\0\132\0\u6432\0\132\0\u648c\0\u64e6\0\u6540"+
    "\0\u659a\0\u65f4\0\u664e\0\u66a8\0\u6702\0\u675c\0\u67b6\0\u6810"+
    "\0\u686a\0\u68c4\0\u691e\0\132\0\u6978\0\132\0\132\0\u69d2"+
    "\0\132\0\u6a2c\0\u6a86\0\u6ae0\0\u6b3a\0\u6b94\0\u6bee\0\132"+
    "\0\u6c48\0\u6ca2\0\u6cfc\0\132\0\u6d56\0\u6db0\0\132\0\u6e0a"+
    "\0\u6e64\0\132\0\u6ebe\0\132\0\u6f18\0\u6f72\0\u6fcc\0\132"+
    "\0\u7026\0\u7080\0\u70da\0\u7134\0\u718e\0\u71e8\0\u7242\0\132"+
    "\0\u729c\0\u72f6\0\u7350\0\132\0\u73aa\0\u7404\0\u745e\0\u74b8"+
    "\0\u7512\0\u756c\0\u75c6\0\u7620\0\u767a\0\u76d4\0\u772e\0\u7788"+
    "\0\u77e2\0\u783c\0\u7896\0\u78f0\0\u794a\0\132\0\u79a4\0\u79fe"+
    "\0\u7a58\0\u7ab2\0\u7b0c\0\u7b66\0\u7bc0\0\132\0\132\0\u7c1a"+
    "\0\u7c74\0\u7cce\0\u7d28\0\u7d82\0\u7ddc\0\u7e36\0\u7e90\0\u7eea"+
    "\0\u7f44\0\u7f9e\0\u7ff8\0\u8052\0\u80ac\0\132\0\132\0\u8106"+
    "\0\132\0\u8160\0\u81ba\0\132\0\u8214\0\u826e\0\u82c8\0\u8322"+
    "\0\u837c\0\u83d6\0\u8430\0\u848a\0\u84e4\0\u853e\0\132\0\132"+
    "\0\132\0\u8598\0\u85f2\0\u864c\0\132\0\u86a6\0\u8700\0\u875a"+
    "\0\u87b4\0\u880e\0\u8868\0\u88c2\0\u891c\0\u8976\0\u89d0\0\u8a2a"+
    "\0\u8a84\0\u8ade\0\132\0\u8b38\0\u8b92\0\u8bec\0\u8c46\0\u8ca0"+
    "\0\132\0\u8cfa\0\u8d54\0\132\0\u8dae\0\132\0\132\0\132"+
    "\0\132\0\u8e08\0\132\0\u8e62\0\132\0\u8ebc\0\u8f16\0\u8f70"+
    "\0\u8fca\0\u9024\0\u907e\0\u90d8\0\132\0\u9132\0\u918c\0\132"+
    "\0\132\0\u91e6\0\132\0\u9240\0\u929a\0\u92f4\0\u934e\0\u93a8"+
    "\0\u9402\0\u945c\0\132\0\u94b6\0\u9510\0\u956a\0\132\0\u95c4"+
    "\0\u961e\0\132\0\132\0\u9678\0\u96d2\0\u972c\0\u9786\0\132"+
    "\0\u97e0\0\u983a\0\u9894\0\u98ee\0\u9948\0\u99a2\0\u99fc\0\u9a56"+
    "\0\u9ab0\0\u9b0a\0\u9b64\0\132\0\u9bbe\0\132\0\132\0\132"+
    "\0\132\0\u9c18\0\u9c72\0\u9ccc\0\u9d26\0\u9d80\0\u9dda\0\132"+
    "\0\u9e34\0\u9e8e\0\u9ee8\0\132\0\u9f42\0\u9f9c\0\132\0\132"+
    "\0\u9ff6\0\ua050\0\ua0aa\0\ua104\0\ua15e\0\ua1b8\0\ua212\0\ua26c"+
    "\0\ua2c6\0\ua320\0\ua37a\0\ua3d4\0\ua42e\0\ua488\0\ua4e2\0\ua53c"+
    "\0\ua596\0\ua5f0\0\ua64a\0\ua6a4\0\ua6fe\0\ua758\0\132\0\132"+
    "\0\ua7b2\0\132\0\ua80c\0\ua866\0\ua8c0\0\ua91a\0\ua974\0\ua9ce"+
    "\0\uaa28\0\uaa82\0\uaadc\0\uab36\0\uab90\0\132\0\uabea\0\132"+
    "\0\132\0\132\0\uac44\0\uac9e\0\uacf8\0\uad52\0\uadac\0\uae06"+
    "\0\uae60\0\uaeba\0\uaf14\0\132\0\132\0\uaf6e\0\132\0\uafc8"+
    "\0\ub022\0\ub07c\0\ub0d6\0\132\0\ub130\0\ub18a\0\ub1e4\0\ub23e"+
    "\0\ub298\0\132\0\ub2f2\0\ub34c\0\ub3a6\0\ub400\0\132\0\ub45a"+
    "\0\132\0\132\0\ub4b4\0\132\0\132\0\132\0\132\0\132"+
    "\0\132\0\ub50e\0\ub568\0\ub5c2\0\ub61c\0\132\0\ub676\0\ub6d0"+
    "\0\ub72a\0\132\0\ub784\0\ub7de\0\ub838\0\132\0\ub892\0\ub8ec"+
    "\0\ub946\0\132\0\ub9a0\0\132\0\ub9fa\0\uba54\0\ubaae\0\ubb08"+
    "\0\132\0\ubb62\0\132\0\ubbbc\0\132\0\ubc16\0\ubc70\0\ubcca"+
    "\0\ubd24\0\ubd7e\0\ubdd8\0\ube32\0\132\0\132\0\ube8c\0\ubee6"+
    "\0\132\0\ubf40\0\ubf9a\0\132\0\132\0\132\0\ubff4\0\uc04e"+
    "\0\132\0\uc0a8\0\uc102\0\uc15c\0\132\0\uc1b6\0\uc210\0\uc26a"+
    "\0\uc2c4\0\uc31e\0\132\0\uc378\0\uc3d2\0\uc42c\0\uc486\0\uc4e0"+
    "\0\uc53a\0\132\0\uc594\0\uc5ee\0\uc648\0\132\0\uc6a2\0\uc6fc"+
    "\0\132\0\132\0\uc756\0\uc7b0\0\uc80a\0\uc864\0\uc8be\0\132"+
    "\0\uc918\0\uc972\0\132\0\uc9cc\0\uca26\0\uca80\0\132\0\ucada"+
    "\0\ucb34\0\132\0\ucb8e\0\132\0\ucbe8\0\132\0\132\0\132"+
    "\0\ucc42\0\132\0\132\0\ucc9c\0\uccf6\0\ucd50\0\132\0\ucdaa"+
    "\0\uce04\0\uce5e\0\uceb8\0\ucf12\0\ucf6c\0\ucfc6\0\132\0\ud020"+
    "\0\ud07a\0\132\0\132\0\132\0\132\0\ud0d4\0\ud12e\0\ud188"+
    "\0\ud1e2\0\ud23c\0\132\0\ud296\0\ud2f0\0\ud34a\0\ud3a4\0\ud3fe"+
    "\0\ud458\0\132\0\132\0\ud4b2\0\ud50c\0\132\0\ud566\0\ud5c0"+
    "\0\ud61a\0\ud674\0\ud6ce\0\ud728\0\132\0\132\0\ud782\0\132"+
    "\0\132\0\ud7dc\0\ud836\0\ud890\0\ud8ea\0\ud944\0\132\0\ud99e"+
    "\0\ud9f8\0\uda52\0\udaac\0\132\0\udb06\0\udb60\0\udbba\0\udc14"+
    "\0\132\0\udc6e\0\udcc8\0\132\0\udd22\0\132\0\udd7c\0\uddd6"+
    "\0\ude30\0\ude8a\0\udee4\0\132\0\udf3e\0\udf98\0\udff2\0\ue04c"+
    "\0\ue0a6\0\ue100\0\ue15a\0\ue1b4\0\ue20e\0\ue268\0\ue2c2\0\ue31c"+
    "\0\132\0\ue376\0\ue3d0\0\ue42a\0\ue484\0\ue4de\0\ue538\0\ue592"+
    "\0\132\0\ue5ec\0\ue646\0\ue6a0\0\ue6fa\0\ue754\0\ue7ae\0\132"+
    "\0\ue808\0\ue862\0\ue8bc\0\132\0\ue916\0\ue970\0\ue9ca\0\uea24"+
    "\0\uea7e\0\uead8\0\ueb32\0\ueb8c\0\uebe6\0\uec40\0\uec9a\0\uecf4"+
    "\0\132\0\ued4e\0\ueda8\0\uee02\0\uee5c\0\ueeb6\0\132\0\uef10"+
    "\0\uef6a\0\uefc4\0\uf01e\0\uf078\0\132\0\uf0d2\0\uf12c\0\uf186"+
    "\0\uf1e0\0\uf23a\0\132\0\uf294\0\uf2ee\0\132\0\uf348\0\uf3a2"+
    "\0\uf3fc\0\uf456\0\uf4b0\0\uf50a\0\132\0\uf564\0\uf5be\0\uf618"+
    "\0\uf672\0\uf6cc\0\uf726\0\132\0\uf780\0\uf7da\0\uf834\0\uf88e"+
    "\0\uf8e8\0\132\0\uf942\0\uf99c\0\uf9f6\0\ufa50\0\ufaaa\0\ufb04"+
    "\0\ufb5e\0\ufbb8\0\ufc12\0\ufc6c\0\ufcc6\0\ufd20\0\ufd7a\0\ufdd4"+
    "\0\ufe2e\0\ufe88\0\ufee2\0\uff3c\0\uff96\0\ufff0\1\112\1\244"+
    "\1\376\1\u0158\1\u01b2\1\u020c\1\u0266\1\u02c0\1\u031a\1\u0374"+
    "\1\u03ce\1\u0428\1\u0482\1\u04dc\1\u0536\1\u0590\1\u05ea\1\u0644"+
    "\1\u069e\1\u06f8\1\u0752\1\u07ac\1\u0806\1\u0860\1\u08ba\1\u0914"+
    "\1\u096e\1\u09c8\1\u0a22\1\u0a7c\1\u0ad6\1\u0b30\1\u0b8a\1\u0be4"+
    "\1\u0c3e\1\u0c98\1\u0cf2\1\u0d4c\1\u0da6\1\u0e00\1\u0e5a\1\u0eb4"+
    "\1\u0f0e\1\u0f68\1\u0fc2\1\u101c\1\u1076\1\u10d0\1\u112a\1\u1184"+
    "\1\u11de\1\u1238\1\u1292\1\u12ec\1\u1346\1\u13a0\1\u13fa\1\u1454"+
    "\1\u14ae\1\u1508\1\u1562\1\u15bc\1\u1616\1\u1670\1\u16ca\1\u1724"+
    "\1\u177e\1\u17d8\1\u1832\1\u188c\1\u18e6\1\u1940\1\u199a\1\u19f4"+
    "\1\u1a4e\1\u1aa8\1\u1b02\1\u1b5c\1\u1bb6\1\u1c10\1\u1c6a\1\u1cc4"+
    "\1\u1d1e\1\u1d78\1\u1dd2\1\u1e2c\1\u1e86\1\u1ee0\1\u1f3a\1\u1f94"+
    "\1\u1fee\1\u2048\1\u20a2\1\u20fc\1\u2156\1\u21b0\1\u220a\1\u2264"+
    "\1\u22be\1\u2318\1\u2372\1\u23cc\1\u2426\1\u2480\1\u24da\1\u2534"+
    "\1\u258e\1\u25e8\1\u2642\1\u269c\1\u26f6\1\u2750\1\u27aa\1\u2804"+
    "\1\u285e\1\u28b8\1\u2912\1\u296c\1\u29c6\1\u2a20\1\u2a7a\1\u2ad4"+
    "\1\u2b2e\1\u2b88\1\u2be2\1\u2c3c\1\u2c96\1\u2cf0\1\u2d4a\1\u2da4"+
    "\1\u2dfe\1\u2e58\1\u2eb2\1\u2f0c\1\u2f66\1\u2fc0\1\u301a\1\u3074"+
    "\1\u30ce\1\u3128\1\u3182\1\u31dc\1\u3236\1\u3290\1\u32ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1063];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\2\1\23\1\2\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\2\1\37\2\2\1\40\3\2\1\41\2\2"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\4\2\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\2\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\2\2"+
    "\1\107\1\2\133\0\1\3\133\0\1\110\133\0\1\111"+
    "\66\0\1\112\45\0\1\113\63\0\1\114\51\0\1\115"+
    "\12\0\1\116\26\0\1\117\1\120\1\121\64\0\1\122"+
    "\3\0\1\123\43\0\1\124\1\125\60\0\1\126\3\0"+
    "\1\127\25\0\1\130\12\0\1\131\1\132\2\0\1\133"+
    "\60\0\1\134\14\0\1\135\14\0\1\136\114\0\1\137"+
    "\120\0\1\140\43\0\1\141\2\0\1\142\124\0\1\143"+
    "\2\0\1\144\71\0\1\145\47\0\1\146\50\0\1\147"+
    "\44\0\1\150\3\0\1\151\1\0\1\152\73\0\1\153"+
    "\32\0\1\154\1\155\63\0\1\156\2\0\1\157\1\0"+
    "\1\160\34\0\1\161\7\0\1\162\75\0\1\163\53\0"+
    "\1\164\6\0\1\165\2\0\1\166\1\167\116\0\1\170"+
    "\10\0\1\171\1\0\1\172\121\0\1\173\11\0\1\174"+
    "\41\0\1\175\55\0\1\176\5\0\1\177\137\0\1\200"+
    "\51\0\1\201\40\0\1\202\12\0\1\203\45\0\1\204"+
    "\110\0\1\205\40\0\1\206\1\207\1\210\121\0\1\211"+
    "\22\0\1\212\131\0\1\213\123\0\1\214\57\0\1\215"+
    "\3\0\1\216\7\0\1\217\14\0\1\220\10\0\1\221"+
    "\2\0\1\222\4\0\1\223\73\0\1\224\33\0\1\225"+
    "\62\0\1\226\1\227\40\0\1\230\7\0\1\231\61\0"+
    "\1\232\10\0\1\233\33\0\1\234\126\0\1\235\64\0"+
    "\1\236\1\0\1\237\1\240\1\0\1\241\23\0\1\242"+
    "\23\0\1\243\53\0\1\244\3\0\1\245\25\0\1\246"+
    "\150\0\1\247\141\0\1\250\10\0\1\251\122\0\1\252"+
    "\127\0\1\253\3\0\1\254\125\0\1\255\131\0\1\256"+
    "\131\0\1\257\131\0\1\260\7\0\1\261\1\262\120\0"+
    "\1\263\10\0\1\264\120\0\1\265\7\0\1\266\1\267"+
    "\61\0\1\270\53\0\1\271\54\0\1\272\55\0\1\273"+
    "\50\0\1\274\3\0\1\275\11\0\1\276\174\0\1\277"+
    "\10\0\1\300\1\301\120\0\1\302\53\0\1\303\131\0"+
    "\1\304\57\0\1\305\51\0\1\306\65\0\1\307\117\0"+
    "\1\310\141\0\1\311\3\0\1\312\41\0\1\313\125\0"+
    "\1\314\135\0\1\315\207\0\1\316\22\0\1\317\221\0"+
    "\1\320\114\0\1\321\101\0\1\322\115\0\1\323\144\0"+
    "\1\324\34\0\1\325\127\0\1\326\127\0\1\327\102\0"+
    "\1\330\121\0\1\331\175\0\1\332\125\0\1\333\135\0"+
    "\1\334\63\0\1\335\177\0\1\336\63\0\1\337\4\0"+
    "\1\340\125\0\1\341\201\0\1\342\120\0\1\343\133\0"+
    "\1\344\64\0\1\345\1\0\1\346\2\0\1\347\46\0"+
    "\1\350\107\0\1\351\15\0\1\352\137\0\1\353\57\0"+
    "\1\354\41\0\1\355\67\0\1\356\172\0\1\357\1\360"+
    "\70\0\1\361\36\0\1\362\65\0\1\363\134\0\1\364"+
    "\126\0\1\365\14\0\1\366\116\0\1\367\10\0\1\370"+
    "\30\0\1\371\1\372\67\0\1\373\160\0\1\374\131\0"+
    "\1\375\114\0\1\376\121\0\1\377\50\0\1\u0100\117\0"+
    "\1\u0101\117\0\1\u0102\120\0\1\u0103\206\0\1\u0104\3\0"+
    "\1\u0105\47\0\1\u0106\65\0\1\u0107\41\0\1\u0108\220\0"+
    "\1\u0109\124\0\1\u010a\47\0\1\u010b\214\0\1\u010c\46\0"+
    "\1\u010d\210\0\1\u010e\6\0\1\u010f\127\0\1\u0110\126\0"+
    "\1\u0111\66\0\1\u0112\174\0\1\u0113\132\0\1\u0114\131\0"+
    "\1\u0115\31\0\1\u0116\144\0\1\u0117\30\0\1\u0118\1\0"+
    "\1\u0119\131\0\1\u011a\4\0\1\u011b\127\0\1\u011c\63\0"+
    "\1\u011d\143\0\1\u011e\30\0\1\u011f\133\0\1\u0120\61\0"+
    "\1\u0121\3\0\1\u0122\125\0\1\u0123\4\0\1\u0124\37\0"+
    "\1\u0125\142\0\1\u0126\121\0\1\u0127\122\0\1\u0128\107\0"+
    "\1\u0129\33\0\1\u012a\65\0\1\u012b\127\0\1\u012c\7\0"+
    "\1\u012d\123\0\1\u012e\202\0\1\u012f\124\0\1\u0130\65\0"+
    "\1\u0131\131\0\1\u0132\141\0\1\u0133\173\0\1\u0134\66\0"+
    "\1\u0135\132\0\1\u0136\121\0\1\u0137\141\0\1\u0138\120\0"+
    "\1\u0139\173\0\1\u013a\2\0\1\u013b\61\0\1\u013c\176\0"+
    "\1\u013d\146\0\1\u013e\127\0\1\u013f\131\0\1\u0140\131\0"+
    "\1\u0141\10\0\1\u0142\120\0\1\u0143\10\0\1\u0144\120\0"+
    "\1\u0145\152\0\1\u0146\126\0\1\u0147\54\0\1\u0148\211\0"+
    "\1\u0149\130\0\1\u014a\134\0\1\u014b\126\0\1\u014c\51\0"+
    "\1\u014d\132\0\1\u014e\130\0\1\u014f\216\0\1\u0150\120\0"+
    "\1\u0151\3\0\1\u0152\1\u0153\137\0\1\u0154\123\0\1\u0155"+
    "\127\0\1\u0156\53\0\1\u0157\213\0\1\u0158\47\0\1\u0159"+
    "\210\0\1\u015a\140\0\1\u015b\134\0\1\u015c\114\0\1\u015d"+
    "\25\0\1\u015e\144\0\1\u015f\172\0\1\u0160\100\0\1\u0161"+
    "\117\0\1\u0162\126\0\1\u0163\146\0\1\u0164\114\0\1\u0165"+
    "\146\0\1\u0166\161\0\1\u0167\130\0\1\u0168\141\0\1\u0169"+
    "\70\0\1\u016a\116\0\1\u016b\131\0\1\u016c\146\0\1\u016d"+
    "\131\0\1\u016e\131\0\1\u016f\161\0\1\u0170\100\0\1\u0171"+
    "\147\0\1\u0172\150\0\1\u0173\75\0\1\u0174\131\0\1\u0175"+
    "\165\0\1\u0176\124\0\1\u0177\72\0\1\u0178\124\0\1\u0179"+
    "\145\0\1\u017a\130\0\1\u017b\133\0\1\u017c\160\0\1\u017d"+
    "\72\0\1\u017e\36\0\1\u017f\71\0\1\u0180\140\0\1\u0181"+
    "\116\0\1\u0182\177\0\1\u0183\76\0\1\u0184\133\0\1\u0185"+
    "\114\0\1\u0186\132\0\1\u0187\204\0\1\u0188\60\0\1\u0189"+
    "\143\0\1\u018a\161\0\1\u018b\101\0\1\u018c\114\0\1\u018d"+
    "\147\0\1\u018e\135\0\1\u018f\131\0\1\u0190\206\0\1\u0191"+
    "\130\0\1\u0192\130\0\1\u0193\54\0\1\u0194\131\0\1\u0195"+
    "\212\0\1\u0196\140\0\1\u0197\117\0\1\u0198\53\0\1\u0199"+
    "\127\0\1\u019a\131\0\1\u019b\133\0\1\u019c\127\0\1\u019d"+
    "\214\0\1\u019e\34\0\1\u019f\200\0\1\u01a0\56\0\1\u01a1"+
    "\136\0\1\u01a2\127\0\1\u01a3\177\0\1\u01a4\63\0\1\u01a5"+
    "\133\0\1\u01a6\127\0\1\u01a7\1\u01a8\172\0\1\u01a9\71\0"+
    "\1\u01aa\131\0\1\u01ab\5\0\1\u01ac\150\0\1\u01ad\13\0"+
    "\1\u01ae\130\0\1\u01af\101\0\1\u01b0\131\0\1\u01b1\121\0"+
    "\1\u01b2\141\0\1\u01b3\115\0\1\u01b4\134\0\1\u01b5\174\0"+
    "\1\u01b6\134\0\1\u01b7\74\0\1\u01b8\33\0\1\u01b9\125\0"+
    "\1\u01ba\116\0\1\u01bb\150\0\1\u01bc\125\0\1\u01bd\101\0"+
    "\1\u01be\131\0\1\u01bf\120\0\1\u01c0\131\0\1\u01c1\125\0"+
    "\1\u01c2\4\0\1\u01c3\132\0\1\u01c4\130\0\1\u01c5\171\0"+
    "\1\u01c6\67\0\1\u01c7\207\0\1\u01c8\131\0\1\u01c9\72\0"+
    "\1\u01ca\206\0\1\u01cb\54\0\1\u01cc\55\0\1\u01cd\53\0"+
    "\1\u01ce\211\0\1\u01cf\46\0\1\u01d0\134\0\1\u01d1\217\0"+
    "\1\u01d2\55\0\1\u01d3\204\0\1\u01d4\44\0\1\u01d5\205\0"+
    "\1\u01d6\131\0\1\u01d7\67\0\1\u01d8\172\0\1\u01d9\132\0"+
    "\1\u01da\132\0\1\u01db\10\0\1\u01dc\121\0\1\u01dd\53\0"+
    "\1\u01de\57\0\1\u01df\53\0\1\u01e0\204\0\1\u01e1\21\0"+
    "\1\u01e2\146\0\1\u01e3\132\0\1\u01e4\127\0\1\u01e5\141\0"+
    "\1\u01e6\162\0\1\u01e7\137\0\1\u01e8\74\0\1\u01e9\121\0"+
    "\1\u01ea\131\0\1\u01eb\171\0\1\u01ec\100\0\1\u01ed\115\0"+
    "\1\u01ee\175\0\1\u01ef\4\0\1\u01f0\131\0\1\u01f1\64\0"+
    "\1\u01f2\133\0\1\u01f3\174\0\1\u01f4\123\0\1\u01f5\120\0"+
    "\1\u01f6\104\0\1\u01f7\177\0\1\u01f8\122\0\1\u01f9\133\0"+
    "\1\u01fa\70\0\1\u01fb\176\0\1\u01fc\111\0\1\u01fd\153\0"+
    "\1\u01fe\72\0\1\u01ff\163\0\1\u0200\136\0\1\u0201\122\0"+
    "\1\u0202\71\0\1\u0203\130\0\1\u0204\173\0\1\u0205\130\0"+
    "\1\u0206\170\0\1\u0207\135\0\1\u0208\120\0\1\u0209\52\0"+
    "\1\u020a\213\0\1\u020b\125\0\1\u020c\136\0\1\u020d\50\0"+
    "\1\u020e\60\0\1\u020f\44\0\1\u0210\131\0\1\u0211\214\0"+
    "\1\u0212\52\0\1\u0213\210\0\1\u0214\125\0\1\u0215\136\0"+
    "\1\u0216\131\0\1\u0217\76\0\1\u0218\77\0\1\u0219\116\0"+
    "\1\u021a\134\0\1\u021b\173\0\1\u021c\66\0\1\u021d\174\0"+
    "\1\u021e\77\0\1\u021f\131\0\1\u0220\131\0\1\u0221\162\0"+
    "\1\u0222\135\0\1\u0223\72\0\1\u0224\121\0\1\u0225\143\0"+
    "\1\u0226\127\0\1\u0227\122\0\1\u0228\140\0\1\u0229\167\0"+
    "\1\u022a\60\0\1\u022b\136\0\1\u022c\130\0\1\u022d\173\0"+
    "\1\u022e\141\0\1\u022f\67\0\1\u0230\130\0\1\u0231\122\0"+
    "\1\u0232\131\0\1\u0233\125\0\1\u0234\205\0\1\u0235\123\0"+
    "\1\u0236\63\0\1\u0237\146\0\1\u0238\162\0\1\u0239\107\0"+
    "\1\u023a\207\0\1\u023b\134\0\1\u023c\124\0\1\u023d\127\0"+
    "\1\u023e\55\0\1\u023f\217\0\1\u0240\37\0\1\u0241\210\0"+
    "\1\u0242\134\0\1\u0243\51\0\1\u0244\131\0\1\u0245\210\0"+
    "\1\u0246\143\0\1\u0247\41\0\1\u0248\217\0\1\u0249\44\0"+
    "\1\u024a\225\0\1\u024b\112\0\1\u024c\130\0\1\u024d\137\0"+
    "\1\u024e\20\0\1\u024f\136\0\1\u0250\145\0\1\u0251\163\0"+
    "\1\u0252\130\0\1\u0253\77\0\1\u0254\174\0\1\u0255\55\0"+
    "\1\u0256\132\0\1\u0257\131\0\1\u0258\143\0\1\u0259\116\0"+
    "\1\u025a\127\0\1\u025b\177\0\1\u025c\66\0\1\u025d\143\0"+
    "\1\u025e\161\0\1\u025f\64\0\1\u0260\134\0\1\u0261\126\0"+
    "\1\u0262\177\0\1\u0263\100\0\1\u0264\117\0\1\u0265\141\0"+
    "\1\u0266\162\0\1\u0267\164\0\1\u0268\53\0\1\u0269\214\0"+
    "\1\u026a\51\0\1\u026b\211\0\1\u026c\47\0\1\u026d\127\0"+
    "\1\u026e\207\0\1\u026f\132\0\1\u0270\130\0\1\u0271\137\0"+
    "\1\u0272\123\0\1\u0273\57\0\1\u0274\152\0\1\u0275\77\0"+
    "\1\u0276\133\0\1\u0277\131\0\1\u0278\121\0\1\u0279\137\0"+
    "\1\u027a\116\0\1\u027b\136\0\1\u027c\173\0\1\u027d\76\0"+
    "\1\u027e\122\0\1\u027f\177\0\1\u0280\60\0\1\u0281\132\0"+
    "\1\u0282\130\0\1\u0283\1\u0284\141\0\1\u0285\123\0\1\u0286"+
    "\125\0\1\u0287\176\0\1\u0288\70\0\1\u0289\170\0\1\u028a"+
    "\65\0\1\u028b\136\0\1\u028c\137\0\1\u028d\131\0\1\u028e"+
    "\136\0\1\u028f\207\0\1\u0290\55\0\1\u0291\132\0\1\u0292"+
    "\205\0\1\u0293\142\0\1\u0294\40\0\1\u0295\214\0\1\u0296"+
    "\51\0\1\u0297\217\0\1\u0298\123\0\1\u0299\127\0\1\u029a"+
    "\136\0\1\u029b\132\0\1\u029c\45\0\1\u029d\211\0\1\u029e"+
    "\45\0\1\u029f\215\0\1\u02a0\23\0\1\u02a1\150\0\1\u02a2"+
    "\164\0\1\u02a3\134\0\1\u02a4\130\0\1\u02a5\134\0\1\u02a6"+
    "\56\0\1\u02a7\176\0\1\u02a8\131\0\1\u02a9\131\0\1\u02aa"+
    "\116\0\1\u02ab\113\0\1\u02ac\122\0\1\u02ad\171\0\1\u02ae"+
    "\100\0\1\u02af\122\0\1\u02b0\137\0\1\u02b1\164\0\1\u02b2"+
    "\101\0\1\u02b3\211\0\1\u02b4\135\0\1\u02b5\47\0\1\u02b6"+
    "\213\0\1\u02b7\131\0\1\u02b8\131\0\1\u02b9\50\0\1\u02ba"+
    "\130\0\1\u02bb\211\0\1\u02bc\126\0\1\u02bd\102\0\1\u02be"+
    "\135\0\1\u02bf\123\0\1\u02c0\132\0\1\u02c1\133\0\1\u02c2"+
    "\62\0\1\u02c3\131\0\1\u02c4\177\0\1\u02c5\133\0\1\u02c6"+
    "\75\0\1\u02c7\166\0\1\u02c8\125\0\1\u02c9\101\0\1\u02ca"+
    "\121\0\1\u02cb\224\0\1\u02cc\54\0\1\u02cd\216\0\1\u02ce"+
    "\126\0\1\u02cf\132\0\1\u02d0\123\0\1\u02d1\55\0\1\u02d2"+
    "\126\0\1\u02d3\205\0\1\u02d4\141\0\1\u02d5\136\0\1\u02d6"+
    "\114\0\1\u02d7\144\0\1\u02d8\16\0\1\u02d9\141\0\1\u02da"+
    "\127\0\1\u02db\131\0\1\u02dc\141\0\1\u02dd\166\0\1\u02de"+
    "\76\0\1\u02df\131\0\1\u02e0\162\0\1\u02e1\100\0\1\u02e2"+
    "\121\0\1\u02e3\226\0\1\u02e4\126\0\1\u02e5\132\0\1\u02e6"+
    "\135\0\1\u02e7\47\0\1\u02e8\131\0\1\u02e9\205\0\1\u02ea"+
    "\132\0\1\u02eb\130\0\1\u02ec\77\0\1\u02ed\102\0\1\u02ee"+
    "\121\0\1\u02ef\171\0\1\u02f0\77\0\1\u02f1\163\0\1\u02f2"+
    "\71\0\1\u02f3\141\0\1\u02f4\120\0\1\u02f5\142\0\1\u02f6"+
    "\215\0\1\u02f7\126\0\1\u02f8\57\0\1\u02f9\131\0\1\u02fa"+
    "\215\0\1\u02fb\42\0\1\u02fc\210\0\1\u02fd\55\0\1\u02fe"+
    "\127\0\1\u02ff\205\0\1\u0300\23\0\1\u0301\210\0\1\u0302"+
    "\77\0\1\u0303\117\0\1\u0304\150\0\1\u0305\214\0\1\u0306"+
    "\125\0\1\u0307\140\0\1\u0308\42\0\1\u0309\207\0\1\u030a"+
    "\56\0\1\u030b\207\0\1\u030c\34\0\1\u030d\140\0\1\u030e"+
    "\166\0\1\u030f\75\0\1\u0310\130\0\1\u0311\216\0\1\u0312"+
    "\52\0\1\u0313\204\0\1\u0314\53\0\1\u0315\134\0\1\u0316"+
    "\206\0\1\u0317\136\0\1\u0318\131\0\1\u0319\124\0\1\u031a"+
    "\22\0\1\u031b\210\0\1\u031c\106\0\1\u031d\206\0\1\u031e"+
    "\54\0\1\u031f\131\0\1\u0320\212\0\1\u0321\45\0\1\u0322"+
    "\132\0\1\u0323\122\0\1\u0324\140\0\1\u0325\217\0\1\u0326"+
    "\117\0\1\u0327\130\0\1\u0328\57\0\1\u0329\210\0\1\u032a"+
    "\51\0\1\u032b\214\0\1\u032c\13\0\1\u032d\251\0\1\u032e"+
    "\44\0\1\u032f\204\0\1\u0330\140\0\1\u0331\47\0\1\u0332"+
    "\217\0\1\u0333\120\0\1\u0334\134\0\1\u0335\127\0\1\u0336"+
    "\127\0\1\u0337\143\0\1\u0338\125\0\1\u0339\20\0\1\u033a"+
    "\244\0\1\u033b\122\0\1\u033c\130\0\1\u033d\135\0\1\u033e"+
    "\52\0\1\u033f\124\0\1\u0340\215\0\1\u0341\51\0\1\u0342"+
    "\127\0\1\u0343\210\0\1\u0344\130\0\1\u0345\30\0\1\u0346"+
    "\240\0\1\u0347\127\0\1\u0348\131\0\1\u0349\137\0\1\u034a"+
    "\117\0\1\u034b\130\0\1\u034c\144\0\1\u034d\124\0\1\u034e"+
    "\124\0\1\u034f\132\0\1\u0350\21\0\1\u0351\240\0\1\u0352"+
    "\55\0\1\u0353\205\0\1\u0354\132\0\1\u0355\50\0\1\u0356"+
    "\137\0\1\u0357\207\0\1\u0358\134\0\1\u0359\22\0\1\u035a"+
    "\242\0\1\u035b\132\0\1\u035c\120\0\1\u035d\130\0\1\u035e"+
    "\130\0\1\u035f\54\0\1\u0360\207\0\1\u0361\30\0\1\u0362"+
    "\242\0\1\u0363\41\0\1\u0364\220\0\1\u0365\126\0\1\u0366"+
    "\127\0\1\u0367\131\0\1\u0368\20\0\1\u0369\247\0\1\u036a"+
    "\121\0\1\u036b\132\0\1\u036c\134\0\1\u036d\127\0\1\u036e"+
    "\27\0\1\u036f\160\0\1\u0370\205\0\1\u0371\132\0\1\u0372"+
    "\17\0\1\u0373\246\0\1\u0374\124\0\1\u0375\54\0\1\u0376"+
    "\106\0\1\u0377\234\0\1\u0378\126\0\1\u0379\27\0\1\u037a"+
    "\244\0\1\u037b\123\0\1\u037c\16\0\1\u037d\240\0\1\u037e"+
    "\33\0\1\u037f\230\0\1\u0380\27\0\1\u0381\241\0\1\u0382"+
    "\13\0\1\u0383\143\0\1\u0384\125\0\1\u0385\123\0\1\u0386"+
    "\144\0\1\u0387\124\0\1\u0388\123\0\1\u0389\145\0\1\u038a"+
    "\123\0\1\u038b\123\0\1\u038c\146\0\1\u038d\122\0\1\u038e"+
    "\123\0\1\u038f\147\0\1\u0390\121\0\1\u0391\123\0\1\u0392"+
    "\150\0\1\u0393\132\0\1\u0394\117\0\1\u0395\124\0\1\u0396"+
    "\130\0\1\u0397\152\0\1\u0398\112\0\1\u0399\137\0\1\u039a"+
    "\143\0\1\u039b\132\0\1\u039c\117\0\1\u039d\132\0\1\u039e"+
    "\143\0\1\u039f\132\0\1\u03a0\132\0\1\u03a1\116\0\1\u03a2"+
    "\145\0\1\u03a3\132\0\1\u03a4\132\0\1\u03a5\132\0\1\u03a6"+
    "\132\0\1\u03a7\132\0\1\u03a8\132\0\1\u03a9\101\0\1\u03aa"+
    "\162\0\1\u03ab\132\0\1\u03ac\132\0\1\u03ad\111\0\1\u03ae"+
    "\117\0\1\u03af\124\0\1\u03b0\130\0\1\u03b1\133\0\1\u03b2"+
    "\137\0\1\u03b3\143\0\1\u03b4\150\0\1\u03b5\75\0\1\u03b6"+
    "\144\0\1\u03b7\117\0\1\u03b8\124\0\1\u03b9\130\0\1\u03ba"+
    "\133\0\1\u03bb\137\0\1\u03bc\143\0\1\u03bd\150\0\1\u03be"+
    "\75\0\1\u03bf\162\0\1\u03c0\132\0\1\u03c1\132\0\1\u03c2"+
    "\111\0\1\u03c3\117\0\1\u03c4\124\0\1\u03c5\130\0\1\u03c6"+
    "\133\0\1\u03c7\137\0\1\u03c8\143\0\1\u03c9\150\0\1\u03ca"+
    "\75\0\1\u03cb\162\0\1\u03cc\135\0\1\u03cd\127\0\1\u03ce"+
    "\111\0\1\u03cf\117\0\1\u03d0\124\0\1\u03d1\130\0\1\u03d2"+
    "\174\0\1\u03d3\70\0\1\u03d4\137\0\1\u03d5\143\0\1\u03d6"+
    "\132\0\1\u03d7\117\0\1\u03d8\132\0\1\u03d9\143\0\1\u03da"+
    "\132\0\1\u03db\132\0\1\u03dc\116\0\1\u03dd\145\0\1\u03de"+
    "\132\0\1\u03df\132\0\1\u03e0\132\0\1\u03e1\132\0\1\u03e2"+
    "\132\0\1\u03e3\132\0\1\u03e4\101\0\1\u03e5\162\0\1\u03e6"+
    "\137\0\1\u03e7\125\0\1\u03e8\111\0\1\u03e9\117\0\1\u03ea"+
    "\124\0\1\u03eb\130\0\1\u03ec\176\0\1\u03ed\66\0\1\u03ee"+
    "\137\0\1\u03ef\143\0\1\u03f0\132\0\1\u03f1\117\0\1\u03f2"+
    "\132\0\1\u03f3\143\0\1\u03f4\132\0\1\u03f5\132\0\1\u03f6"+
    "\116\0\1\u03f7\145\0\1\u03f8\132\0\1\u03f9\132\0\1\u03fa"+
    "\132\0\1\u03fb\132\0\1\u03fc\132\0\1\u03fd\132\0\1\u03fe"+
    "\101\0\1\u03ff\162\0\1\u0400\141\0\1\u0401\123\0\1\u0402"+
    "\111\0\1\u0403\117\0\1\u0404\124\0\1\u0405\130\0\1\u0406"+
    "\200\0\1\u0407\63\0\1\u0408\132\0\1\u0409\140\0\1\u040a"+
    "\142\0\1\u040b\157\0\1\u040c\110\0\1\u040d\124\0\1\u040e"+
    "\160\0\1\u040f\115\0\1\u0410\101\0\1\u0411\144\0\1\u0412"+
    "\112\0\1\u0413\132\0\1\u0414\140\0\1\u0415\142\0\1\u0416"+
    "\157\0\1\u0417\110\0\1\u0418\124\0\1\u0419\160\0\1\u041a"+
    "\70\0\1\u041b\143\0\1\u041c\132\0\1\u041d\143\0\1\u041e"+
    "\101\0\1\u041f\144\0\1\u0420\163\0\1\u0421\132\0\1\u0422"+
    "\76\0\1\u0423\131\0\1\u0424\131\0\1\u0425\163\0\1\u0426"+
    "\57\0\1\u0427\155\0\2\u0427\26\0\1\u0427\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[78660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\13\1\2\11\3\1\1\11\11\1\1\11"+
    "\1\1\1\11\1\1\1\11\7\1\1\11\16\1\1\0"+
    "\1\1\3\11\3\0\1\1\3\0\1\1\20\0\2\11"+
    "\6\0\1\1\13\0\1\11\17\0\3\11\12\0\1\11"+
    "\1\1\1\11\6\0\1\11\10\0\2\11\1\1\6\11"+
    "\2\1\1\11\1\1\1\11\2\1\2\0\1\1\4\0"+
    "\1\11\20\0\1\11\1\0\1\11\16\0\1\1\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\30\0\1\11\14\0"+
    "\1\11\23\0\1\11\6\0\1\11\2\0\1\1\2\0"+
    "\1\11\5\0\1\11\6\0\4\11\1\1\1\11\1\1"+
    "\2\11\14\0\1\11\1\0\1\11\16\0\1\11\1\0"+
    "\2\11\1\0\1\11\6\0\1\11\3\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\0\1\11\3\0\1\11\7\0"+
    "\1\11\3\0\1\11\21\0\1\11\7\0\2\11\16\0"+
    "\2\11\1\0\1\11\2\0\1\11\12\0\3\11\3\0"+
    "\1\11\15\0\1\11\5\0\1\11\2\0\1\11\1\0"+
    "\4\11\1\0\1\11\1\0\1\11\7\0\1\11\2\0"+
    "\2\11\1\0\1\11\7\0\1\11\3\0\1\11\2\0"+
    "\2\11\4\0\1\11\13\0\1\11\1\0\4\11\6\0"+
    "\1\11\3\0\1\11\2\0\2\11\26\0\2\11\1\0"+
    "\1\11\13\0\1\11\1\0\3\11\11\0\2\11\1\0"+
    "\1\11\4\0\1\11\5\0\1\11\4\0\1\11\1\0"+
    "\2\11\1\0\6\11\4\0\1\11\3\0\1\11\3\0"+
    "\1\11\3\0\1\11\1\0\1\11\4\0\1\11\1\0"+
    "\1\11\1\0\1\11\7\0\2\11\2\0\1\11\2\0"+
    "\3\11\2\0\1\11\3\0\1\11\5\0\1\11\6\0"+
    "\1\11\3\0\1\11\2\0\2\11\5\0\1\11\2\0"+
    "\1\11\3\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\2\11\3\0\1\11\7\0\1\11\2\0"+
    "\4\11\5\0\1\11\6\0\2\11\2\0\1\11\6\0"+
    "\2\11\1\0\2\11\5\0\1\11\4\0\1\11\4\0"+
    "\1\11\2\0\1\11\1\0\1\11\5\0\1\11\14\0"+
    "\1\11\7\0\1\11\6\0\1\11\3\0\1\11\14\0"+
    "\1\11\5\0\1\11\5\0\1\11\5\0\1\11\2\0"+
    "\1\11\6\0\1\11\6\0\1\11\5\0\1\11\244\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1063];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _CSharpLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { return OP_TILDA_EQ;
          }
        case 223: break;
        case 144: 
          { return KW_TYPEOF;
          }
        case 224: break;
        case 221: 
          { return ALTERNATE_WYSIWYG_STRING;
          }
        case 225: break;
        case 226: break;
        case 108: 
          { return OP_USH_RIGHT_EQ;
          }
        case 227: break;
        case 228: break;
        case 229: break;
        case 158: 
          { return KW_SIZEOF;
          }
        case 230: break;
        case 150: 
          { return KW_UNSAFE;
          }
        case 231: break;
        case 142: 
          { return KW_RETURN;
          }
        case 232: break;
        case 37: 
          { return KW_DO;
          }
        case 233: break;
        case 234: break;
        case 178: 
          { return KW_PARTIAL;
          }
        case 235: break;
        case 198: 
          { return KW_NAMESPACE;
          }
        case 236: break;
        case 237: break;
        case 104: 
          { return KW_LOCK;
          }
        case 238: break;
        case 213: 
          { return FLOAT_LITERAL;
          }
        case 239: break;
        case 219: 
          { return FUNCTION_DEFINITION;
          }
        case 240: break;
        case 22: 
          { return OP_DIV;
          }
        case 241: break;
        case 135: 
          { return KW_SHORT;
          }
        case 242: break;
        case 71: 
          { return DOT;
          }
        case 243: break;
        case 217: 
          { return CHARACTER_LITERAL;
          }
        case 244: break;
        case 183: 
          { return KW_ABSTRACT;
          }
        case 245: break;
        case 116: 
          { return KW_BREAK;
          }
        case 246: break;
        case 132: 
          { return KW_WHILE;
          }
        case 247: break;
        case 56: 
          { return OP_LESS_GR;
          }
        case 248: break;
        case 151: 
          { return KW_USHORT;
          }
        case 249: break;
        case 26: 
          { return OP_GT;
          }
        case 250: break;
        case 57: 
          { return OP_GT_EQ;
          }
        case 251: break;
        case 91: 
          { return KW_FROM;
          }
        case 252: break;
        case 92: 
          { return KW_NULL;
          }
        case 253: break;
        case 67: 
          { return KW_NEW;
          }
        case 254: break;
        case 201: 
          { return KW_UNCHECKED;
          }
        case 255: break;
        case 41: 
          { return OP_MUL_EQ;
          }
        case 256: break;
        case 133: 
          { return KW_SBYTE;
          }
        case 257: break;
        case 187: 
          { return KW_CONTINUE;
          }
        case 258: break;
        case 259: break;
        case 260: break;
        case 20: 
          { return OP_AT;
          }
        case 261: break;
        case 44: 
          { return KW_IS;
          }
        case 262: break;
        case 131: 
          { return KW_WHERE;
          }
        case 263: break;
        case 82: 
          { return OP_NOT_LESS_EQ;
          }
        case 264: break;
        case 102: 
          { return KW_WHEN;
          }
        case 265: break;
        case 266: break;
        case 88: 
          { return KW_BASE;
          }
        case 267: break;
        case 19: 
          { return OP_DOT;
          }
        case 268: break;
        case 167: 
          { return KW_FINALLY;
          }
        case 269: break;
        case 7: 
          { return OP_OR;
          }
        case 270: break;
        case 81: 
          { return OP_USH_RIGHT;
          }
        case 271: break;
        case 54: 
          { return OP_LESS_EQ;
          }
        case 272: break;
        case 273: break;
        case 42: 
          { return KW_IF;
          }
        case 274: break;
        case 204: 
          { return SEMICOLON;
          }
        case 275: break;
        case 276: break;
        case 33: 
          { return KW_AS;
          }
        case 277: break;
        case 145: 
          { return KW_DOUBLE;
          }
        case 278: break;
        case 34: 
          { return KW_BY;
          }
        case 279: break;
        case 218: 
          { return MODULE_DEFINITION;
          }
        case 280: break;
        case 61: 
          { return OP_NOT_GR;
          }
        case 281: break;
        case 190: 
          { return BRACKETS;
          }
        case 282: break;
        case 123: 
          { return KW_CONST;
          }
        case 283: break;
        case 118: 
          { return KW_FLOAT;
          }
        case 284: break;
        case 24: 
          { return OP_TILDA;
          }
        case 285: break;
        case 207: 
          { return KW_STACKALLOC;
          }
        case 286: break;
        case 169: 
          { return KW_VIRTUAL;
          }
        case 287: break;
        case 120: 
          { return KW_THROW;
          }
        case 288: break;
        case 35: 
          { return OP_MINUS_MINUS;
          }
        case 289: break;
        case 58: 
          { return OP_SH_RIGHT;
          }
        case 290: break;
        case 129: 
          { return KW_USING;
          }
        case 291: break;
        case 203: 
          { return KW_PROTECTED;
          }
        case 292: break;
        case 119: 
          { return KW_FIXED;
          }
        case 293: break;
        case 107: 
          { return KW_JOIN;
          }
        case 294: break;
        case 295: break;
        case 13: 
          { return OP_AND;
          }
        case 296: break;
        case 59: 
          { return OP_NOT_EQ;
          }
        case 297: break;
        case 27: 
          { return OP_NOT;
          }
        case 298: break;
        case 65: 
          { return KW_ADD;
          }
        case 299: break;
        case 122: 
          { return KW_CLASS;
          }
        case 300: break;
        case 301: break;
        case 17: 
          { return OP_EQ;
          }
        case 302: break;
        case 177: 
          { return KW_ORDERBY;
          }
        case 303: break;
        case 68: 
          { return KW_REF;
          }
        case 304: break;
        case 305: break;
        case 202: 
          { return KW_INTERFACE;
          }
        case 306: break;
        case 196: 
          { return OPERATOR;
          }
        case 307: break;
        case 84: 
          { return OP_NOT_GR_EQ;
          }
        case 308: break;
        case 78: 
          { return OP_SH_LEFT_EQ;
          }
        case 309: break;
        case 143: 
          { return KW_REMOVE;
          }
        case 310: break;
        case 124: 
          { return KW_EVENT;
          }
        case 311: break;
        case 154: 
          { return KW_STRING;
          }
        case 312: break;
        case 109: 
          { return OP_UNORD;
          }
        case 313: break;
        case 314: break;
        case 315: break;
        case 160: 
          { return KW_PARAMS;
          }
        case 316: break;
        case 147: 
          { return KW_EQUALS;
          }
        case 317: break;
        case 134: 
          { return KW_SUPER;
          }
        case 318: break;
        case 172: 
          { return KW_DECIMAL;
          }
        case 319: break;
        case 8: 
          { return OP_QUEST;
          }
        case 320: break;
        case 23: 
          { return OP_MOD;
          }
        case 321: break;
        case 12: 
          { return OP_BRACES_RIGHT;
          }
        case 322: break;
        case 323: break;
        case 324: break;
        case 39: 
          { return OP_BOOL_AND;
          }
        case 325: break;
        case 152: 
          { return KW_STATIC;
          }
        case 326: break;
        case 64: 
          { return OP_POW_EQ;
          }
        case 327: break;
        case 76: 
          { return KW_OUT;
          }
        case 328: break;
        case 163: 
          { return NUMBER;
          }
        case 329: break;
        case 80: 
          { return OP_SH_RIGHT_EQ;
          }
        case 330: break;
        case 51: 
          { return OP_DIV_EQ;
          }
        case 331: break;
        case 47: 
          { return OP_LAMBDA_ARROW;
          }
        case 332: break;
        case 185: 
          { return KW_READONLY;
          }
        case 333: break;
        case 211: 
          { return LINE_COMMENT;
          }
        case 334: break;
        case 46: 
          { return OP_EQ_EQ;
          }
        case 335: break;
        case 72: 
          { return KW_SET;
          }
        case 336: break;
        case 148: 
          { return BRACES;
          }
        case 337: break;
        case 210: 
          { return PARENTHESES;
          }
        case 338: break;
        case 170: 
          { return KW_CHECKED;
          }
        case 339: break;
        case 48: 
          { return OP_DDOT;
          }
        case 340: break;
        case 168: 
          { return KW_FOREACH;
          }
        case 341: break;
        case 106: 
          { return KW_GOTO;
          }
        case 342: break;
        case 98: 
          { return KW_ENUM;
          }
        case 343: break;
        case 25: 
          { return OP_LESS;
          }
        case 344: break;
        case 345: break;
        case 165: 
          { return STRING;
          }
        case 346: break;
        case 45: 
          { return KW_ON;
          }
        case 347: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 348: break;
        case 6: 
          { return OP_BRACKET_RIGHT;
          }
        case 349: break;
        case 4: 
          { return OP_BRACKET_LEFT;
          }
        case 350: break;
        case 97: 
          { return KW_CHAR;
          }
        case 351: break;
        case 50: 
          { return OP_PLUS_PLUS;
          }
        case 352: break;
        case 16: 
          { return OP_COLON;
          }
        case 353: break;
        case 83: 
          { return OP_UNORD_EQ;
          }
        case 354: break;
        case 137: 
          { return KW_YIELD;
          }
        case 355: break;
        case 153: 
          { return KW_STRUCT;
          }
        case 356: break;
        case 29: 
          { return OP_POW;
          }
        case 357: break;
        case 3: 
          { return OP_PAR_LEFT;
          }
        case 358: break;
        case 130: 
          { return KW_ULONG;
          }
        case 359: break;
        case 43: 
          { return KW_IN;
          }
        case 360: break;
        case 191: 
          { return KW_UNITTEST;
          }
        case 361: break;
        case 15: 
          { return OP_SCOLON;
          }
        case 362: break;
        case 94: 
          { return KW_THIS;
          }
        case 363: break;
        case 222: 
          { return DOUBLE_QUOTED_STRING;
          }
        case 364: break;
        case 216: 
          { return DELIMITED_STRING;
          }
        case 365: break;
        case 195: 
          { return KW_OPERATOR;
          }
        case 366: break;
        case 60: 
          { return OP_NOT_LESS;
          }
        case 367: break;
        case 157: 
          { return KW_SWITCH;
          }
        case 368: break;
        case 176: 
          { return SHEBANG;
          }
        case 369: break;
        case 121: 
          { return KW_CATCH;
          }
        case 370: break;
        case 212: 
          { return BLOCK_COMMENT;
          }
        case 371: break;
        case 208: 
          { return IDENTIFIER;
          }
        case 372: break;
        case 69: 
          { return KW_TRY;
          }
        case 373: break;
        case 28: 
          { return OP_DOLLAR;
          }
        case 374: break;
        case 197: 
          { return KW_ASCENDING;
          }
        case 375: break;
        case 5: 
          { return OP_XOR;
          }
        case 376: break;
        case 209: 
          { return HEX_STRING;
          }
        case 377: break;
        case 90: 
          { return KW_BOOL;
          }
        case 378: break;
        case 14: 
          { return OP_ASTERISK;
          }
        case 379: break;
        case 30: 
          { return OP_XOR_EQ;
          }
        case 380: break;
        case 141: 
          { return KW_NAMEOF;
          }
        case 381: break;
        case 105: 
          { return KW_INTO;
          }
        case 382: break;
        case 74: 
          { return KW_INT;
          }
        case 383: break;
        case 66: 
          { return KW_FOR;
          }
        case 384: break;
        case 184: 
          { return KW_FUNCTION;
          }
        case 385: break;
        case 205: 
          { return KW_DESCENDING;
          }
        case 386: break;
        case 99: 
          { return KW_ELSE;
          }
        case 387: break;
        case 146: 
          { return KW_EXTERN;
          }
        case 388: break;
        case 200: 
          { return KW_ARGLIST;
          }
        case 389: break;
        case 161: 
          { return KW_PUBLIC;
          }
        case 390: break;
        case 77: 
          { return OP_TRIPLEDOT;
          }
        case 391: break;
        case 31: 
          { return OP_BOOL_OR;
          }
        case 392: break;
        case 115: 
          { return KW_ALIAS;
          }
        case 393: break;
        case 173: 
          { return KW_DYNAMIC;
          }
        case 394: break;
        case 95: 
          { return KW_VOID;
          }
        case 395: break;
        case 113: 
          { return KW_AWAIT;
          }
        case 396: break;
        case 117: 
          { return KW_FALSE;
          }
        case 397: break;
        case 32: 
          { return OP_OR_EQ;
          }
        case 398: break;
        case 399: break;
        case 93: 
          { return KW_TRUE;
          }
        case 400: break;
        case 49: 
          { return OP_PLUS_EQ;
          }
        case 401: break;
        case 402: break;
        case 103: 
          { return KW_LONG;
          }
        case 403: break;
        case 404: break;
        case 405: break;
        case 155: 
          { return KW_SEALED;
          }
        case 406: break;
        case 10: 
          { return OP_MINUS;
          }
        case 407: break;
        case 181: 
          { return KEYWORD;
          }
        case 408: break;
        case 159: 
          { return KW_OBJECT;
          }
        case 409: break;
        case 410: break;
        case 214: 
          { return WYSIWYG_STRING;
          }
        case 411: break;
        case 9: 
          { return OP_PAR_RIGHT;
          }
        case 412: break;
        case 18: 
          { return OP_COMMA;
          }
        case 413: break;
        case 414: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 415: break;
        case 52: 
          { return OP_MOD_EQ;
          }
        case 416: break;
        case 417: break;
        case 75: 
          { return KW_GET;
          }
        case 418: break;
        case 21: 
          { return OP_PLUS;
          }
        case 419: break;
        case 40: 
          { return OP_AND_EQ;
          }
        case 420: break;
        case 128: 
          { return COMMA;
          }
        case 421: break;
        case 89: 
          { return KW_BYTE;
          }
        case 422: break;
        case 194: 
          { return KW_OVERRIDE;
          }
        case 423: break;
        case 186: 
          { return KW_VOLATILE;
          }
        case 424: break;
        case 156: 
          { return KW_SELECT;
          }
        case 425: break;
        case 101: 
          { return KW_UINT;
          }
        case 426: break;
        case 96: 
          { return KW_CASE;
          }
        case 427: break;
        case 188: 
          { return KW_DELEGATE;
          }
        case 428: break;
        case 114: 
          { return KW_ASYNC;
          }
        case 430: break;
        case 220: 
          { return NESTING_BLOCK_COMMENT;
          }
        case 431: break;
        case 215: 
          { return INTEGER_LITERAL;
          }
        case 432: break;
        case 193: 
          { return KW_IMPLICIT;
          }
        case 433: break;
        case 62: 
          { return ID;
          }
        case 434: break;
        case 11: 
          { return OP_BRACES_LEFT;
          }
        case 435: break;
        case 55: 
          { return OP_SH_LEFT;
          }
        case 436: break;
        case 192: 
          { return KW_INTERNAL;
          }
        case 437: break;
        case 179: 
          { return KW_PRIVATE;
          }
        case 438: break;
        case 36: 
          { return OP_MINUS_EQ;
          }
        case 439: break;
        case 171: 
          { return KW_DEFAULT;
          }
        case 440: break;
        case 73: 
          { return KW_LET;
          }
        case 441: break;
        case 79: 
          { return OP_LESS_GR_EQ;
          }
        case 442: break;
        case 189: 
          { return KW_EXPLICIT;
          }
        case 443: break;
        case 136: 
          { return KW_GROUP;
          }
        case 444: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
