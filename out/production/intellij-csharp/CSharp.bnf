{

  parserClass='com.csharp.parser.CSharpParser'
  parserUtilClass="com.csharp.parser.CSharpParserUtil"

    implements='com.csharp.psi.CSharpCompositeElement'
    extends='com.csharp.psi.impl.CSharpCompositeElementImpl'

  elementTypeHolderClass='com.csharp.CSharpTypes'
  elementTypeClass='com.csharp.psi.CSharpCompositeElementType'
  tokenTypeClass='com.csharp.psi.CSharpTokenType'

  psiClassPrefix='CSharp'
  psiImplClassSuffix='Impl'
  psiPackage='com.csharp.psi'
  psiImplPackage='com.csharp.psi.impl'



  tokens=[
      LBRACE               =  '{'
      RBRACE               =  '}'
      LBRACK               =  '['
      RBRACK               =  ']'
      LPAREN               =  '('
      RPAREN               =  ')'
      COLON                =  ':'
      SEMI                 =  ';'
      COMMA                =  ','
      EQ                   =  '=='
      ASSIGN               =  '='
      NOT_EQ               =  '!='
      NOT                  =  '!'
      PLUS_PLUS            =  '++'
      PLUS_ASSIGN          =  '+='
      PLUS                 =  '+'
      MINUS_MINUS          =  '--'
      MINUS_ASSIGN         =  '-='
      MINUS                =  '-'
      COND_OR              =  '||'
      BIT_OR_ASSIGN        =  '|='
      BIT_CLEAR_ASSIGN     =  '&^='
      BIT_CLEAR            =  '&^'
      COND_AND             =  '&&'
      BIT_AND_ASSIGN       =  '&='
      BIT_AND              =  '&'
      BIT_OR               =  '|'
      SHIFT_LEFT_ASSIGN    =  '<<='
      SHIFT_LEFT           =  '<<'
      LESS_OR_EQUAL        =  '<='
      LESS                 =  '<'
      BIT_XOR_ASSIGN       =  '^='
      BIT_XOR              =  '^'
      MUL_ASSIGN           =  '*='
      MUL                  =  '*'
      QUOTIENT_ASSIGN      =  '/='
      QUOTIENT             =  '/'
      REMAINDER_ASSIGN     =  '%='
      REMAINDER            =  '%'
      SHIFT_RIGHT_ASSIGN   =  '>>='
      SHIFT_RIGHT          =  '>>'
      GREATER_OR_EQUAL     =  '>='
      GREATER              =  '>'
      DOT                  =  '.'
      APOS                 =  ''''
      QUOTE                =  '"'
      BACK                 =  '\'
      MOD                  =  '%'

      WS                   = 'regexp:\s+'
      COMMENT              = 'regexp://.*'
      DIGIT                = 'regexp:\d+(\.\d*)?'
      STRING               = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
      IDENTIFIER                   = 'regexp:\p{Alpha}\w*'
    ]
}


File ::= ImportList NamespaceDec
ImportList ::= ImportDec*
ImportDec ::= using IDENTIFIER (IDENTIFIER | DOT)* SEMI
NamespaceDec ::= namespace IDENTIFIER LBRACE ClassList RBRACE
ClassList ::= ClassDec*
ClassDec ::= (AccessModifier? TypeModifier? Modules IDENTIFIER LBRACE MethodList RBRACE)
MethodList ::= (MethodDec | EnumDec | VarDec)*
MethodDec ::= AccessModifier? TypeModifier* (Type | void) IDENTIFIER LPAREN (Type IDENTIFIER ','?)* RPAREN LBRACE Expr* RBRACE
EnumDec ::= AccessModifier? enum IDENTIFIER LBRACE (IDENTIFIER ',')* IDENTIFIER* RBRACE


Expr ::= (VarDec | QualifiedClassDec | Arithmetic | AssignArithmetic | Switch | Using | Return | ForStatement |
          ForEachStatement | IfStatement | FlowStatement | MethodCall | Property | Exception | TypeCheck)

VarDec ::= AccessModifier? TypeModifier? (BoolDec | ByteDec | CharDec | FloatDec | IntDec |
                                          StringDec | NewTypeDec  | ListDec |
                                          GeneralDec | PreprocessorDec | CustomObjectDec | DictionaryDec)

GeneralDec ::= (PrimitiveTypes | GenericTypes)? (Property | CustomType+) ASSIGN Cast? (Arithmetic | Invocation |
                TypeCheck | Property | MethodCall | Bool | null | DIGIT | CustomType) SEMI?
NewTypeDec ::= ((PrimitiveTypes | CustomType) IDENTIFIER | Property) ASSIGN new? (PrimitiveTypes | GenericTypes | MethodCall
                 | QualifiedClassDec) SEMI?

BoolDec ::= bool IDENTIFIER ASSIGN (true | false) SEMI {pin=2}
ByteDec ::= byte IDENTIFIER ASSIGN (0x DIGIT+) SEMI {pin=2} // todo
CharDec ::= char IDENTIFIER ASSIGN APOS ("[a-zA-Z0-9]" | (BACK ('u' | 'x') DIGIT{4})) APOS SEMI {pin=2}
FloatDec ::= float IDENTIFIER ASSIGN DIGIT '.'? 'f' SEMI {pin=2}
IntDec ::= u?(int | long | short) IDENTIFIER ASSIGN (Arithmetic | DIGIT) SEMI {pin=3}
StringDec ::= 'string' IDENTIFIER ASSIGN STRING SEMI {pin=2}
ListDec ::= GenericTypes IDENTIFIER ASSIGN ((new GenericTypes) | MethodCall) SEMI?
DictionaryDec ::= GenericTypes IDENTIFIER ASSIGN (((new GenericTypes | TypeCheck)) | MethodCall | CustomType) SEMI
QualifiedClassDec ::= 'System' ('.' (PrimitiveTypes | GenericTypes | IDENTIFIER))+ Argument SEMI {pin=2}
CustomObjectDec ::= CustomType IDENTIFIER ASSIGN (Cast (IDENTIFIER | DIGIT | STRING) | new CustomType LPAREN (IDENTIFIER | DIGIT | STRING)
                    RPAREN) SEMI {pin=2}

Arithmetic ::= Cast? (MethodCall | Property| DIGIT | CustomType) (Operator Cast? (MethodCall | Property| DIGIT |
               CustomType))+
AssignArithmetic ::= CustomType AssignOperator (MethodCall | Property | CustomType | DIGIT | STRING)? SEMI?
Comparison ::= (Expr | CustomType | DIGIT | STRING) (CompareOperator (Expr | CustomType | DIGIT | STRING))+

Parameter ::= IDENTIFIER LPAREN ((PrimitiveTypes | CustomType) IDENTIFIER ','*)* RPAREN
Argument ::= LPAREN (out? Cast? (QualifiedClassDec | Invocation | Arithmetic| MethodCall | Property | DIGIT | STRING |
             null | Bool | TypeCheck | CustomType) ','?)* RPAREN
Invocation ::= new (QualifiedClassDec | PrimitiveTypes | GenericTypes | CustomType) Argument?

MethodCall ::= (QualifiedClassDec | IDENTIFIER) (('.'(QualifiedClassDec | CustomType))? Argument)+ SEMI?
Property ::= (MethodCall | CustomType) ('.' IDENTIFIER)+ Array? SEMI?

ForStatement ::= for LPAREN IntDec Arithmetic SEMI? AssignArithmetic RPAREN LBRACE? Expr* RBRACE? {pin=10}
ForEachStatement ::= foreach LPAREN (PrimitiveTypes | CustomType) IDENTIFIER in (Property | MethodCall | CustomType) RPAREN LBRACE? Expr*
                     RBRACE? {pin=8}
Switch ::= switch LPAREN (MethodCall | Property | CustomType) RPAREN LBRACE (case LPAREN? (DIGIT | STRING |
           CustomType) RPAREN? ':' Expr*)* (default ':' Expr*)? RBRACE
Using ::= using LPAREN CustomType IDENTIFIER ASSIGN (Invocation | MethodCall | Property) RPAREN LBRACE Expr* RBRACE {pin=9}
Return ::= return (Expr | Bool | CustomType) SEMI?
IfStatement ::= if LPAREN (Comparison | TypeCheck | CustomType) RPAREN LBRACE? Expr* RBRACE? ElseIfStatement*
                ElseStatement?
private ElseStatement ::= else LBRACE? Expr* RBRACE?
private ElseIfStatement ::= else IfStatement

FlowStatement ::= (break | continue) SEMI

Exception ::= throw new MethodCall

TypeCheck ::= IDENTIFIER (is | as | instanceof) (QualifiedClassDec | PrimitiveTypes | GenericTypes | CustomType) // todo name +
              // remove from expr?


private Cast ::= LPAREN (PrimitiveTypes | GenericTypes | CustomType) RPAREN

private Array ::= LBRACK (Arithmetic | IDENTIFIER | DIGIT | STRING)? RBRACK

Type ::= PrimitiveTypes | GenericTypes | CustomType
Value ::= Bool | STRING | DIGIT | null



/* Tokens */ // temp
PrimitiveTypes ::= (bool | byte | sbyte | char | decimal | double | float | int | uint | long | ulong | object | short |
           ushort | var | 'string') Array?    // todo
GenericTypes ::= (List | Dictionary) '<' (','? (PrimitiveTypes | GenericTypes | CustomType))+ '>' Argument?
private CustomType ::= (IDENTIFIER Array?) | null

Bool ::= true | false
ValueClasses ::= (struct | enum)
Modules ::= (class | interface | delegate)


PreprocessorDec ::= '#'(if | else | elif | endif | define | undef | warning | error | line | region |
                        endregion | pragma | pragma warning | pragma checksum) IDENTIFIER*
AccessModifier ::= (public | private | protected | internal)
TypeModifier ::= (abstract | async | const | event | extern | new | override | partial | readonly | sealed |
                  static | unsafe | virtual | volatile) // todo split into method modifiers w/ rules

ReservedWords ::= (as | base | break | case | catch | continue | do | else | false | finally | for | foreach | goto |
                   if | in | is | lock | namespace | new | null | out | ref | return | sizeof | stackalloc | switch |
                   this | throw | true | try | typeof | using | while | var | yield)

Operator ::= PLUS | MINUS | MUL | QUOTIENT | BIT_AND | BIT_OR | BIT_XOR | GREATER | GREATER_OR_EQUAL | LESS |
             LESS_OR_EQUAL | MOD
AssignOperator ::= PLUS_PLUS | PLUS_ASSIGN | MINUS_MINUS | MINUS_ASSIGN | MUL_ASSIGN | QUOTIENT_ASSIGN |
                   REMAINDER_ASSIGN | BIT_OR_ASSIGN | BIT_CLEAR_ASSIGN | BIT_AND_ASSIGN | BIT_XOR_ASSIGN |
                   SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN
CompareOperator ::= EQ | NOT_EQ | LESS | LESS_OR_EQUAL | GREATER | GREATER_OR_EQUAL | COND_OR | COND_AND
